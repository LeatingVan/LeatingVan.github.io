<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql基础</title>
      <link href="/2022/02/07/%E6%95%B0%E6%8D%AE%E5%BA%93%20MySQL%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/02/07/%E6%95%B0%E6%8D%AE%E5%BA%93%20MySQL%20%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-基础学习"><a href="#MySQL-基础学习" class="headerlink" title="MySQL 基础学习"></a>MySQL 基础学习</h1><h2 id="一、基本了解"><a href="#一、基本了解" class="headerlink" title="一、基本了解"></a>一、基本了解</h2><h3 id="1-1-数据库的好处"><a href="#1-1-数据库的好处" class="headerlink" title="1.1 数据库的好处"></a>1.1 数据库的好处</h3><p>1.持久化数据到本地</p><p>2.可以实现结构化查询，方便管理</p><h3 id="1-2-数据库相关概念"><a href="#1-2-数据库相关概念" class="headerlink" title="1.2 数据库相关概念"></a>1.2 数据库相关概念</h3><p>DB: 数据库，保存一组有组织的数据的容器 </p><p>DBMS: 数据库管理系统，又称为数据库软件，用于管理DB中的数据 </p><p>SQL: 结构化查询语言，用于DBMS通信的语言</p><h3 id="1-3-MYSQL的启动和停止"><a href="#1-3-MYSQL的启动和停止" class="headerlink" title="1.3 MYSQL的启动和停止"></a>1.3 MYSQL的启动和停止</h3><p>1.此计算机——管理——服务和应用程序——服务——MySQL 打开后可无脑操作</p><ol start="2"><li>cmd——以管理员身份打开——输入命令net stop mysql56(自己起的名字)可停止运行 输入net start mysql56 可重新启动运行 登入之前必须保证是启动状态……..</li></ol><h3 id="1-4-MYSQL服务端的登录和退出"><a href="#1-4-MYSQL服务端的登录和退出" class="headerlink" title="1.4 MYSQL服务端的登录和退出"></a>1.4 MYSQL服务端的登录和退出</h3><ol><li><p>在黑色的MySQL comand line client输入密码即可进入（适用root用户） </p></li><li><p>cmd上——输入：mysql -h localhost -P3306 -u root -p 3306是端口默认值 输入exit来退出 cmd输入</p></li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></tbody></table></figure><p>mysql代表客户端命令，-u后面跟连接的数据库用户，-p表示需要输入密码。</p><h3 id="1-5配置环境变量"><a href="#1-5配置环境变量" class="headerlink" title="1.5配置环境变量"></a>1.5配置环境变量</h3><p>打开文件安装目录——找到bin——复制粘贴路径——系统变量里添加</p><h2 id="二、MySQL常用命令"><a href="#二、MySQL常用命令" class="headerlink" title="二、MySQL常用命令"></a>二、MySQL常用命令</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases; #列出数据库列表</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名; #选择要操作的数据库，使用该命令后所有mysql命令都只针对该数据库。</span><br><span class="line">Database changed</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables; # 显示指定数据库的所有表，使用前需要use +（数据库名）来选择操作</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables from 数据库名; 在use了某个库之后查看另一个库</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名; # 创建数据库</span><br><span class="line">drop database 数据库名; # 删除数据库</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table 列表名(name type); # 创建数据表 字符串用varchar表示</span><br><span class="line">drop table 列表名; # 删除删除数据表</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into 列表名</span><br><span class="line">(title, author, date)</span><br><span class="line">values</span><br><span class="line">("学习MySQL", "菜鸟教程", NOW());</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from 列表名; # 查询读取列表中的数据</span><br><span class="line">select * from 列表名 where id=1;#有条件的从表中查询读取数据</span><br><span class="line">select * from 列表名 where runoob_author like "%com"; #在列表中查询表头对应有某字段的数</span><br><span class="line">据</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 列表名 set title="xxx"where id=3; # 更新修改列表中的数据</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 列表名 where id=3; #删除列表中的数据</span><br></pre></td></tr></tbody></table></figure><p>表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类” 的设计。</p><p>表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java中的 ”属性“ 。</p><p>表中的数据是按行存储的，每一行类似于java中的 ”对象“ 。</p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202071439437.png?raw=true" alt="image-20211115223741649"></p>]]></content>
      
      
      <categories>
          
          <category> MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/2022/02/07/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2022/02/07/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><h2 id="难度系数："><a href="#难度系数：" class="headerlink" title="难度系数："></a>难度系数：</h2><p>⭐⭐</p><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br>示例 2：</p><p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br>示例 3：</p><p>输入：nums = [3,3], target = 6<br>输出：[0,1]</p><p>提示：</p><p>2 &lt;= nums.length &lt;= 104<br>-109 &lt;= nums[i] &lt;= 109<br>-109 &lt;= target &lt;= 109<br>只会存在一个有效答案<br>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul><li>枚举数组中的每一个数x，寻找数组中是否存在 target - x</li><li>使用遍历整个数组的方法来寻找x与target-x</li><li>每一个位于x之前的元素都已经和x匹配过，因此不需要再匹配，且每一个元素不能使用两次，所以只需在x后面寻找target - x</li></ul><h3 id="暴力枚举（Java）"><a href="#暴力枚举（Java）" class="headerlink" title="暴力枚举（Java）"></a>暴力枚举（Java）</h3><p>完整代码</p><p>demo1.java</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">//暴力解法</span><br><span class="line">public class demo1 {</span><br><span class="line">    public static void main(String[] args){</span><br><span class="line">        //给定数组数据</span><br><span class="line">        int[] nums = {2, 7, 11, 15};</span><br><span class="line">        //输入target</span><br><span class="line">        System.out.println("请输入目标值（traget）：");</span><br><span class="line">        //获取target</span><br><span class="line">        int target = new Scanner(System.in).nextInt();</span><br><span class="line">        //调用方法，返回结果数组</span><br><span class="line">        int[] arr2 = twoSum(nums, target);</span><br><span class="line">        //进行判断</span><br><span class="line">        while (arr2 == null){</span><br><span class="line">            System.out.println("数组中没有可以合成该target的两个数！请输入其他target：");</span><br><span class="line">            target = new Scanner(System.in).nextInt();</span><br><span class="line">            arr2=twoSum(nums,target);</span><br><span class="line">        }</span><br><span class="line">        //输出</span><br><span class="line">        System.out.println("合成该target数组下标为："+ Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public static int[] twoSum(int[] nums, int target){</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        for(int i=0; i&lt;n; i++){</span><br><span class="line">            for(int j=i+1; j&lt;n; j++){</span><br><span class="line">                if(nums[i] + nums[j] == target){</span><br><span class="line">                    return new int[]{i, j};</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return new int[0];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><p>请输入目标值（traget）：<br>9<br>合成该target数组下标为：[0, 1]</p><blockquote><p>复杂度分析</p><p>时间复杂度：O(N^2)，其中 N是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</p><p>空间复杂度：O(1)。</p></blockquote><h3 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h3><h4 id="方法二：哈希表"><a href="#方法二：哈希表" class="headerlink" title="方法二：哈希表"></a>方法二：哈希表</h4><p>注意到方法一的时间复杂度较高的原因是<strong>寻找 target - x 的时间复杂度过高。</strong>因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。</p><p>使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N)降低到 O(1)。</p><p><strong>这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Solution {</span><br><span class="line">    public int[] twoSum(int[] nums, int target) {</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = new HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        for (int i = 0; i &lt; nums.length; ++i) {</span><br><span class="line">            if (hashtable.containsKey(target - nums[i])) {</span><br><span class="line">                return new int[]{hashtable.get(target - nums[i]), i};</span><br><span class="line">            }</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        }</span><br><span class="line">        return new int[0];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python异常处理与文件操作</title>
      <link href="/2022/02/07/python%E7%AC%AC%E5%9B%9B%E8%AF%BE/"/>
      <url>/2022/02/07/python%E7%AC%AC%E5%9B%9B%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>定义一个Person类，并且具有name（姓名），age（年龄），sex（性别）等三个属性，并可以：（1）通过三个set方法改变这三个属性的值；（2）可以通过show方法显示Person对象的详细信息。</p><p>定义完成后，请实例化对象，并对三个方法进行调用。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name, age ,sex</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setAge</span>(<span class="params">self,age</span>):</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSex</span>(<span class="params">self,sex</span>):</span></span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Name:'</span>,self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Age:'</span>,self.age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Sex:'</span>,self.sex)</span><br><span class="line"></span><br><span class="line">pes=Person(<span class="string">"GDPU"</span>,<span class="number">20</span>,<span class="string">"male"</span>)</span><br><span class="line">pes.setSex(<span class="string">"female"</span>)</span><br><span class="line"></span><br><span class="line">pes.show()</span><br></pre></td></tr></tbody></table></figure><h2 id="7-异常"><a href="#7-异常" class="headerlink" title="7.异常"></a>7.异常</h2><blockquote><p>Python使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生让Python不知</p><p>所措的错误时，它都会创建一个异常对象。如果你编写了处理该异常的代码，程序将继续运行；</p><p>如果你未对异常进行处理，程序将停止，并显示一个traceback，其中包含有关异常的报告。</p><p>异常是使用try-except代码块处理的。try-except代码块让Python执行指定的操作，同时告</p><p>诉Python发生异常时怎么办。使用了try-except代码块时，即便出现异常，程序也将继续运行</p><p><strong>显示你编写的友好的错误消息</strong>，而不是令用户迷惑的traceback。</p></blockquote><h3 id="7-1处理-ZeroDivisionError-异常"><a href="#7-1处理-ZeroDivisionError-异常" class="headerlink" title="7.1处理 ZeroDivisionError 异常"></a>7.1<strong>处理 ZeroDivisionError 异常</strong></h3><p>下面来看一种导致Python引发异常的简单错误。你可能知道不能将一个数字除以0，但我们</p><p>还是让Python这样做吧：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>) </span><br></pre></td></tr></tbody></table></figure><p>显然，Python无法这样做，因此你将看到一个traceback：</p><p>Traceback (most recent call last): </p><p> File “division.py”, line 1, in &lt;module&gt; </p><p> print(5/0) </p><p>ZeroDivisionError: division by zero </p><p>在上述traceback中，指出的错误ZeroDivisionError是一个异常对象。Python无法按你的</p><p>要求做时，就会创建这种对象。在这种情况下，Python将停止运行程序，并指出引发了哪种异常，</p><p>而我们可根据这些信息对程序进行修改。下面我们将告诉Python，发生这种错误时怎么办；这样，</p><p>如果再次发生这样的错误，我们就有备无患了。</p><h4 id="7-1-1-使用-try-except-代码块"><a href="#7-1-1-使用-try-except-代码块" class="headerlink" title="7.1.1 使用 try-except 代码块"></a><strong>7.1.1 使用 try-except 代码块</strong></h4><p>当你认为可能发生了错误时，可编写一个try-except代码块来处理可能引发的异常。你让</p><p>Python尝试运行一些代码，并告诉它如果这些代码引发了指定的异常，该怎么办。</p><p>处理ZeroDivisionError异常的try-except代码块类似于下面这样：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>) </span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"You can't divide by zero!"</span>) </span><br></pre></td></tr></tbody></table></figure><p>我们将导致错误的代码行print(5/0)放在了一个try代码块中。如果try代码块中的代码运行</p><p>起来没有问题，Python将跳过except代码块；如果try代码块中的代码导致了错误，Python将查找</p><p>这样的except代码块，并运行其中的代码，即其中指定的错误与引发的错误相同。</p><p>在这个示例中，try代码块中的代码引发了ZeroDivisionError异常，因此Python指出了该如</p><p>何解决问题的except代码块，并运行其中的代码。这样，用户看到的是一条友好的错误消息，而</p><p>不是traceback：</p><p>You can’t divide by zero! </p><p>如果try-except代码块后面还有其他代码，程序将接着运行。</p><h4 id="7-1-2-使用异常避免崩溃"><a href="#7-1-2-使用异常避免崩溃" class="headerlink" title="7.1.2 使用异常避免崩溃"></a>7.1.2 使用异常避免崩溃</h4><blockquote><p>发生错误时，如果程序还有工作没有完成，妥善地处理错误就尤其重要。这种情况经常会出</p><p>现在要求用户提供输入的程序中；如果程序能够妥善地处理无效输入，就能再提示用户提供有效</p><p>输入，而不至于崩溃。程序崩溃可不好，但让用户看到traceback也不是好主意。</p><p>不懂技术的用户会被它们搞糊涂，而且如果用户怀有恶意，他会通过traceback获悉你不希望他知道的信息。</p><p>例如，他将知道你的程序文件的名称，还将看到部分不能正确运行的代码。有时候，训练有素的攻击者可根据这些信息判断出可对你的代码发起什么样的攻击。</p></blockquote><p>下面来创建一个只执行除法运算的简单计算器：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Give me two numbers, and I'll divide them."</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = <span class="built_in">input</span>(<span class="string">"\nFirst number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    second_number = <span class="built_in">input</span>(<span class="string">"Second number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    answer = <span class="built_in">int</span>(first_number) / <span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="built_in">print</span>(answer)</span><br></pre></td></tr></tbody></table></figure><p>做出改动:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Give me two numbers, and I'll divide them."</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = <span class="built_in">input</span>(<span class="string">"\nFirst number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">    second_number = <span class="built_in">input</span>(<span class="string">"Second number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(first_number) / <span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"You can't divide by 0!"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="7-2else-和finally-代码块"><a href="#7-2else-和finally-代码块" class="headerlink" title="7.2else 和finally 代码块"></a>7.2else 和finally 代码块</h3><p>通过将可能引发错误的代码放在try-except代码块中</p><p>成功执行的代码都应放到else代码块中</p><p>最后总是要执行的代码都应放到finally代码块中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError :</span><br><span class="line">    <span class="string">'''异常的父类，可以捕获所有的异常'''</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">"0不能被除"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="string">'''保护不抛出异常的代码'''</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">"没有异常"</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"最后总是要执行我"</span></span><br></pre></td></tr></tbody></table></figure><p>让Python尝试执行try代码块中的除法运算，这个代码块只包含可能导致错误的代码。</p><p>依赖于try代码块成功执行的代码都放在else代码块中；在这个示例中，如果除法运算成</p><p>功，我们就使用else代码块来打印结果。</p><p>except代码块告诉Python，出现ZeroDivisionError异常时该怎么办。如果try代码块</p><p>因除零错误而失败，我们就打印一条友好的消息，告诉用户如何避免这种错误。程序将继续运行。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Give me two numbers, and I'll divide them."</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first_number = <span class="built_in">input</span>(<span class="string">"\nFirst number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = <span class="built_in">input</span>(<span class="string">"Second number: "</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = <span class="built_in">int</span>(first_number) / <span class="built_in">int</span>(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(answer)</span><br></pre></td></tr></tbody></table></figure><p>try-except-else代码块的工作原理大致如下：Python尝试执行try代码块中的代码；只有可</p><p>能引发异常的代码才需要放在try语句中。有时候，有一些仅在try代码块成功执行时才需要运行</p><p>的代码；这些代码应放在else代码块中。except代码块告诉Python，如果它尝试运行try代码块中</p><p>的代码时引发了指定的异常，该怎么办。</p><h3 id="7-3异常的参数"><a href="#7-3异常的参数" class="headerlink" title="7.3异常的参数"></a>7.3异常的参数</h3><p>一个异常可以带上参数，可作为输出的异常信息参数。</p><p>你可以通过except语句来捕获异常的参数，如下所示：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">5</span>/<span class="number">0</span>) </span><br><span class="line"><span class="keyword">except</span> ExceptionType <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment">#你可以在这输出 Argument 的值...</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(e)) </span><br><span class="line">    <span class="built_in">print</span>(e) </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">repr</span>(e))</span><br></pre></td></tr></tbody></table></figure><p><strong>1、str(e)</strong></p><p>返回字符串类型，只给出异常信息，不包括异常信息的类型，如1/0的异常信息</p><p>‘integer division or modulo by zero’</p><p><strong>2、repr(e)</strong></p><p>给出较全的异常信息，包括异常信息的类型，如1/0的异常信息</p><p>“ZeroDivisionError(‘integer division or modulo by zero’,)”</p><h3 id="7-4所有异常"><a href="#7-4所有异常" class="headerlink" title="7.4所有异常"></a>7.4所有异常</h3><p><strong>Exception : ‘’’异常的父类，可以捕获所有的异常’’’</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="string">'''异常的父类，可以捕获所有的异常'''</span></span><br><span class="line">    <span class="built_in">print</span> (e)</span><br></pre></td></tr></tbody></table></figure><h2 id="8-文件操作"><a href="#8-文件操作" class="headerlink" title="8.文件操作"></a>8.文件操作</h2><h3 id="读"><a href="#读" class="headerlink" title="读"></a>读</h3><p><code>open()</code> 接收一个文件名和一个模式作为它的参数，<code>r</code> 表示以只读模式打开文件。想要往文件中写数据的话，则用<code>w</code> 作为参数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'data.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'context: {}'</span>.<span class="built_in">format</span>(data))</span><br></pre></td></tr></tbody></table></figure><p>python文件对象提供了三个“读”方法： read()、readline() 和 readlines()。每种方法可以接受一个变量以限制每次读取的数据量。</p><ul><li>read() 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中。如果文件大于可用内存，为了保险起见，可以反复调用<code>read(size)</code>方法，每次最多读取size个字节的内容。</li><li>readlines() 之间的差异是后者一次读取整个文件，象 .read() 一样。.readlines() 自动将文件内容分析成一个行的列表，该列表可以由 Python 的 for … in … 结构进行处理。</li><li>readline() 每次只读取一行，通常比readlines() 慢得多。仅当没有足够内存可以一次读取整个文件时，才应该使用 readline()。</li></ul><h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'data.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = <span class="string">'some data to be written to the file'</span></span><br><span class="line">    f.write(data)</span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：’w’这个模式是这样子：如果没有这个文件，就创建一个；如果有，那么就会先把原文件的内容清空再写入新的东西。所以若不想清空原来的内容而是直接在后面追加新的内容，就用’a’这个模式。</p><p>python文件对象提供了两个“写”方法： write() 和 writelines()。</p><ul><li><p>write()方法和read()、readline()方法对应，是将字符串写入到文件中。</p></li><li><p>writelines()方法和readlines()方法对应，也是针对<strong>列表</strong>的操作。它接收一个<strong>字符串列表</strong>作为参数，将他们写入到文件中，换行符不会自动的加入，因此，需要显式的加入换行符。</p></li></ul><h3 id="关于open-的mode参数"><a href="#关于open-的mode参数" class="headerlink" title="关于open()的mode参数"></a><strong>关于open()的mode参数</strong></h3><p>‘r’：读</p><p>‘w’：写</p><p>‘a’：追加</p><p>‘r+’ == r+w（可读可写，文件若不存在就报错(IOError)）</p><p>‘w+’ == w+r（可读可写，文件若不存在就创建）</p><p>‘a+’ ==a+r（可追加可写，文件若不存在就创建）</p><p>对应的，如果是二进制文件，就都加一个b就好了：</p><p>‘rb’　　‘wb’　　‘ab’　　‘rb+’　　‘wb+’　　‘ab+’ </p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>编写程序实现：用户输入一段文字，将该段文字保存到当前目录的test.txt文件中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">"请输入"</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'data01.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(a)</span><br></pre></td></tr></tbody></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>在D盘主目录下，创建一个文本文件tangshi.txt，文本内容为：</p><p>天门中断楚江开，碧水东流至此回。<br>两岸青山相对出，孤帆一片日边来。</p><p>请编写程序读取该文本文件，并将所有行的内容打印显示。</p><p>参考答案：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'tangshi.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python02</title>
      <link href="/2022/02/07/python%E7%AC%AC%E4%BA%8C%E8%AF%BE/"/>
      <url>/2022/02/07/python%E7%AC%AC%E4%BA%8C%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-列表"><a href="#1-列表" class="headerlink" title="1.列表"></a>1.列表</h2><p>特点：列表由一系列按特定顺序排列的元素组成。<strong>列表元素按顺序有序排序。</strong>你可以创建包含字母表中所有字母、数字0~9或所有家庭成员姓名的列表；也可以将任何东西加入列表中，其中的元素之间可以没有任何关系，<strong>任意数据类型混存，列表可以存储重复数据。</strong></p><p><strong>索引映射唯一数据。</strong></p><p>变量可以存储一个元素，而列表是一个“大容器”可以存储N个元素，程序可以方便地对这些数据进行整体操作。</p><h4 id="1-1列表的创建"><a href="#1-1列表的创建" class="headerlink" title="1.1列表的创建"></a>1.1列表的创建</h4><ul><li>使用中括号</li><li>调用内置函数list()</li></ul><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202071713694.png?raw=true" alt="image-20220126202549123"></p><h4 id="1-2访问列表元素"><a href="#1-2访问列表元素" class="headerlink" title="1.2访问列表元素"></a><strong>1.2访问列表元素</strong></h4><h5 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h5><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202071710657.png?raw=true" alt="image-20220126203033492"></p><h5 id="获取索引"><a href="#获取索引" class="headerlink" title="获取索引"></a>获取索引</h5><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202071710671.png?raw=true" alt="image-20220126203329306"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst1=['hello','world',98,100]</span><br><span class="line">print(lst1.index(98)) //2</span><br></pre></td></tr></tbody></table></figure><p>列表是有序集合，因此要访问列表的任何元素，只需将该元素的位置或索引告诉Python即可。</p><p>要访问列表元素，可指出列表的名称，再指出元素的索引，并将其放在方括号内。</p><p>例如，下面的代码从列表bicycles中提取第一款自行车：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'trek'</span>, <span class="string">'cannondale'</span>, <span class="string">'redline'</span>, <span class="string">'specialized'</span>] </span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>]) </span><br></pre></td></tr></tbody></table></figure><h5 id="索引从-0-而不是-1-开始"><a href="#索引从-0-而不是-1-开始" class="headerlink" title="索引从 0 而不是 1 开始"></a>索引从 0 而不是 1 开始</h5><p>在Python中，第一个列表元素的索引为0，而不是1。在大多数编程语言中都是如此，这与列</p><p>表操作的底层实现相关。如</p><p>print(bicycles[-1]) </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = ['trek', 'cannondale', 'redline', 'specialized'] </span><br><span class="line">message = "My first bicycle was a " + bicycles[0].title() + "." </span><br><span class="line">print(message)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">'hello'</span>, [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] ]</span><br><span class="line">a[<span class="number">0</span>]    <span class="comment"># 就是 1</span></span><br><span class="line">a[<span class="number">1</span>]    <span class="comment"># 就是 2</span></span><br><span class="line">a[<span class="number">4</span>]    <span class="comment"># 就是 [7,8,9]</span></span><br><span class="line">a[-<span class="number">1</span>]   <span class="comment"># 也是 [7,8,9]</span></span><br><span class="line">a[-<span class="number">4</span>]   <span class="comment"># 也是 2</span></span><br><span class="line">a[-<span class="number">1</span>][<span class="number">0</span>]  <span class="comment"># a[-1] 是[7,8,9],  a[-1][0] 就是 [7,8,9] 里面的第一个元素，就是 7</span></span><br></pre></td></tr></tbody></table></figure><p>题目</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var1 = [ <span class="number">33</span>, [<span class="string">'我的名字'</span>, <span class="string">'黑羽白月'</span>], <span class="string">'hello world!'</span>]</span><br></pre></td></tr></tbody></table></figure><p>请接下来写一行代码，打印出var1这个列表变量里面的 字符串 hello world!</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var1 = [ <span class="number">33</span>, [<span class="string">'我的名字'</span>, <span class="string">'帅哥'</span>], <span class="string">'hello world!'</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li><p>修改var1这个列表变量里面的 <strong>hello world！</strong> 为 <strong>Oh my God!</strong></p></li><li><p>修改var1这个列表变量里面的 人名字 <strong>帅哥</strong> 为 <strong>靓仔</strong></p></li></ul><h4 id="1-3获取列表中的多个元素"><a href="#1-3获取列表中的多个元素" class="headerlink" title="1.3获取列表中的多个元素"></a>1.3获取列表中的多个元素</h4><p>语法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表名[start:stop:step]</span><br></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst1=[10,20,30,40,50,60,70,80]</span><br><span class="line">print(lst1[1:6:1])</span><br></pre></td></tr></tbody></table></figure><p>[20, 30, 40, 50, 60]</p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202071710190.png?raw=true" alt="image-20220126210828917"></p><h5 id="列表元素的判断以及遍历"><a href="#列表元素的判断以及遍历" class="headerlink" title="列表元素的判断以及遍历"></a>列表元素的判断以及遍历</h5><p>判定指定元素在列表中是否存在:</p><p>元素  in  列表名            元素  not in 列表名</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst1=[10,20,30,40,50,60,70,80]</span><br><span class="line">print(10 in lst1)  //True</span><br><span class="line">print(20 not in lst1) //False</span><br><span class="line">print(100 in lst1) //False</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst1=[10,20,30,40,50,60,70,80]</span><br><span class="line">for item in lst1:</span><br><span class="line">    print(item)</span><br></pre></td></tr></tbody></table></figure><p>10<br>20<br>30<br>40<br>50<br>60<br>70<br>80</p><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a><strong>切片</strong></h4><p>你还可以处理列表的部分元素——Python称之为切片。</p><p>要创建切片，可指定要使用的第一个元素和最后一个元素的索引。与函数range()一样，Python</p><p>在<strong>到达你指定的第二个索引前面的元素后停止</strong>。要输出列表中的前三个元素，需要指定索引0~3，</p><p>这将输出分别为0、1和2的元素。</p><p>下面的示例处理的是一个运动队成员列表：</p><p>players.py </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>] </span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>])<span class="comment">#['charles', 'martina', 'michael']  </span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你可以生成列表的任何子集，例如，如果你要提取列表的第2~4个元素，可将起始索引指定</span></span><br><span class="line"><span class="string">为1，并将终止索引指定为4,这一次，切片始于'marita'，终于'florence'：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>] </span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>])<span class="comment">#['martina', 'michael', 'florence']  </span></span><br></pre></td></tr></tbody></table></figure><p><strong>如果没有指定第一个索引</strong>，Python将自动从列表开头开始：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>] </span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>]) <span class="comment">#['charles', 'martina', 'michael', 'florence'] </span></span><br></pre></td></tr></tbody></table></figure><p>要让切片<strong>终止于列表末尾</strong>，也可使用类似的语法。例如，如果要提取从第3个元素到列表末</p><p>尾的所有元素，可将起始索引指定为2，并省略终止索引：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>] </span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:]) <span class="comment">#['michael', 'florence', 'eli'] </span></span><br></pre></td></tr></tbody></table></figure><p>负数索引返回离列表末尾相应距离的元素，因此你可以输出列表末尾的任何切片。例如，如果你</p><p>要输出名单上的最后三名队员，可使用切片players[-3:]：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'michael'</span>, <span class="string">'florence'</span>, <span class="string">'eli'</span>] </span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:]) </span><br></pre></td></tr></tbody></table></figure><p>上述代码打印最后三名队员的名字，即便队员名单的长度发生变化，也依然如此。</p><h4 id="1-3修改列表元素"><a href="#1-3修改列表元素" class="headerlink" title="1.3修改列表元素"></a>1.3<strong>修改列表元素</strong></h4><p>修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改</p><p>的元素的索引，再指定该元素的新值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'banane'</span>] </span><br><span class="line"><span class="built_in">print</span>(fruits) <span class="comment">#['apple', 'orange', 'banane'] </span></span><br><span class="line">fruits[<span class="number">0</span>] = <span class="string">'pineapple'</span> </span><br><span class="line"><span class="built_in">print</span>(fruits) <span class="comment">#['pineapple', 'orange', 'banane'] </span></span><br></pre></td></tr></tbody></table></figure><p><strong>也可以利用切片来修改列表元素</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst1=[10,20,30,40,50,60,70,80]</span><br><span class="line">lst1[1:3]=[200,300]</span><br><span class="line">print(lst1)</span><br></pre></td></tr></tbody></table></figure><p>[10, 200, 300, 40, 50, 60, 70, 80]</p><h4 id="1-4在列表中添加元素"><a href="#1-4在列表中添加元素" class="headerlink" title="1.4在列表中添加元素"></a>1.4<strong>在列表中添加元素</strong></h4><p>Python提供了多种在既有列表中添加新数据的方式。</p><p><strong>1. 在列表末尾添加元素</strong></p><p>在列表中添加新元素时，最简单的方式是将元素附加到列表末尾。给列表附加元素时，它将</p><p>添加到列表末尾。继续使用前一个示例中的列表，在其末尾添加新元素’ducati’：</p><p>方法**append()**将元素’ducati’添加到了列表末尾，而不影响列表中的其他所有元素</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment">#['honda', 'yamaha', 'suzuki'] </span></span><br><span class="line"></span><br><span class="line">motorcycles.append(<span class="string">'ducati'</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment">#['honda', 'yamaha', 'suzuki', 'ducati'] </span></span><br></pre></td></tr></tbody></table></figure><p>方法append()让动态地创建列表易如反掌，例如，你可以先创建一个空列表，再使用一系列的</p><p>append()语句添加元素。下面来创建一个空列表，再在其中添加元素’honda’、’yamaha’和’suzuki’：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [] </span><br><span class="line">motorcycles.append(<span class="string">'honda'</span>) </span><br><span class="line">motorcycles.append(<span class="string">'yamaha'</span>) </span><br><span class="line">motorcycles.append(<span class="string">'suzuki'</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) </span><br><span class="line"><span class="comment">#最终的列表与前述示例中的列表完全相同：</span></span><br><span class="line"><span class="comment">#['honda', 'yamaha', 'suzuki'] </span></span><br></pre></td></tr></tbody></table></figure><p>这种创建列表的方式极其常见，因为经常要等程序运行后，你才知道用户要在程序中存储哪</p><p>些数据。为控制用户，可首先创建一个空列表，用于存储用户将要输入的值，然后将用户提供的</p><p>每个新值附加到列表中。</p><p><strong>2.在列表的末尾至少添加一个元素</strong></p><p>extend()</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst1=[10,20,30,40,50,60,70,80]</span><br><span class="line">lst2=['hello','world','!']</span><br><span class="line">lst1.extend(lst2)</span><br><span class="line">print(lst1)</span><br></pre></td></tr></tbody></table></figure><p>[10, 20, 30, 40, 50, 60, 70, 80, ‘hello’, ‘world’, ‘!’]</p><p><strong>3. 在列表任意位置添加一个元素</strong></p><p>使用方法**insert()**可在列表的任何位置添加新元素。为此，你需要指定新元素的索引和值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>] </span><br><span class="line">motorcycles.insert(<span class="number">0</span>, <span class="string">'ducati'</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment">#['ducati', 'honda', 'yamaha', 'suzuki'] </span></span><br></pre></td></tr></tbody></table></figure><p>方法insert()在索引0处添加空间，并将值’ducati’存储到这个地方。</p><p><strong>4.在任意位置上添加N个元素</strong>（切掉部分用新元素替换）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lst1=[10,20,30,40,50,60,70,80]</span><br><span class="line">lst2=['hello','world']</span><br><span class="line">lst1[9:]=lst2</span><br><span class="line">print(lst1)</span><br></pre></td></tr></tbody></table></figure><p>[10, 20, 30, 40, 50, 60, 70, 80, ‘hello’, ‘world’]</p><h4 id="1-5从列表中删除元素"><a href="#1-5从列表中删除元素" class="headerlink" title="1.5从列表中删除元素"></a><strong>1.5从列表中删除元素</strong></h4><p><strong>1. 使用del语句删除元素</strong></p><p>如果知道要删除的元素在列表中的位置，可使用del语句。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment">#['honda', 'yamaha', 'suzuki'] </span></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment">#['yamaha', 'suzuki'] </span></span><br></pre></td></tr></tbody></table></figure><p>代码使用del删除了列表motorcycles中的第一个元素——‘honda’</p><p>使用del可删除任何位置处的列表元素，<strong>条件是知道其索引</strong>。</p><p><strong>2. 使用方法pop()删除元素</strong></p><p>方法pop()可删除<strong>列表末尾</strong>的元素，并让你能够接着使用它。</p><p>下面从列表motorcycles中弹出一款摩托车：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment">#['honda', 'yamaha', 'suzuki'] </span></span><br><span class="line"></span><br><span class="line">popped_motorcycle = motorcycles.pop() </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment">#['honda', 'yamaha'] </span></span><br><span class="line"><span class="built_in">print</span>(popped_motorcycle) <span class="comment">#suzuki </span></span><br></pre></td></tr></tbody></table></figure><p>我们首先定义并打印了列表motorcycles。接下来，我们从这个列表中弹出一个值，</p><p>并将其存储到变量popped_motorcycle中。然后我们打印这个列表，以核实从其中删除了一个值。最后，我们打印弹出的值，以证明我们依然能够访问被删除的值。</p><p><strong>3. 弹出列表中任何位置处的元素</strong></p><p>实际上，你可以使用pop()来删除列表中任何位置的元素，只需在括号中<strong>指定要删除的元素</strong></p><p><strong>的索引</strong>即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>] </span><br><span class="line">first_owned = motorcycles.pop(<span class="number">0</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">'The first motorcycle I owned was a '</span> + first_owned.title() + <span class="string">'.'</span>) </span><br></pre></td></tr></tbody></table></figure><p>如果你不确定该使用del语句还是pop()方法，下面是一个简单的判断标准：如果你要从列表</p><p>中删除一个元素，且不再以任何方式使用它，就使用del语句；如果你要在删除元素后还能继续</p><p>使用它，就使用方法pop()。</p><p><strong>4. 根据值删除元素</strong></p><p>有时候，你不知道要从列表中删除的值所处的位置。如果你只知道要删除的元素的值，可使</p><p>用方法<strong>remove()。</strong></p><p>例如，假设我们要从列表motorcycles中删除值’ducati’。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>, <span class="string">'ducati'</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment">#['honda', 'yamaha', 'suzuki', 'ducati'] </span></span><br><span class="line"></span><br><span class="line">motorcycles.remove(<span class="string">'ducati'</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment">#['honda', 'yamaha', 'suzuki'] </span></span><br></pre></td></tr></tbody></table></figure><p>注意 方法remove()只删除第一个指定的值。</p><p><strong>5.切片操作–至少删除一个元素</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst1=[10,20,30,40,50,60,70,80]</span><br><span class="line">newlst=lst1[1:3]</span><br><span class="line">print(newlst)</span><br></pre></td></tr></tbody></table></figure><p>[20, 30]</p><p>6.<strong>清除列表中的所有元素</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.clear()</span><br></pre></td></tr></tbody></table></figure><ol start="7"><li>直接删除列表对象</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del list</span><br></pre></td></tr></tbody></table></figure><h4 id="1-7列表常用方法"><a href="#1-7列表常用方法" class="headerlink" title="1.7列表常用方法"></a>1.7列表常用方法</h4><p><strong>使用方法 sort()对列表进行永久性排序</strong></p><p>Python方法sort()让你能够较为轻松地对列表进行排序</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>] </span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars) </span><br></pre></td></tr></tbody></table></figure><p>方法sort()永久性地修改了列表元素的排列顺序。现在，汽车是<strong>按字母顺序</strong>排列的，</p><p>再也无法恢复到原来的排列顺序：</p><p>[‘audi’, ‘bmw’, ‘subaru’, ‘toyota’] </p><p>你还可以按与字母顺序<strong>相反</strong>的顺序排列列表元素，为此，只需向sort()方法传递参数</p><p><strong>reverse=True</strong>。下面的示例将汽车列表按与字母顺序相反的顺序排列：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>] </span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="built_in">print</span>(cars) <span class="comment">#['toyota', 'subaru', 'bmw', 'audi'] </span></span><br></pre></td></tr></tbody></table></figure><p><strong>使用函数 sorted()对列表进行临时排序</strong></p><p>要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。函数</p><p>sorted()让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。</p><p>下面尝试对汽车列表调用这个函数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Here is the original list:"</span>) </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\nHere is the sorted list:"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars)) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\nHere is the original list again:"</span>) </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br></pre></td></tr></tbody></table></figure><p>Here is the original list: </p><p>[‘bmw’, ‘audi’, ‘toyota’, ‘subaru’] </p><p>Here is the sorted list: </p><p>[‘audi’, ‘bmw’, ‘subaru’, ‘toyota’] </p><p>Here is the original list again: </p><p>[‘bmw’, ‘audi’, ‘toyota’, ‘subaru’] </p><p>注意，调用函数sorted()后，列表元素的排列顺序并没有变如果你要按与字母顺</p><p>序相反的顺序显示列表，也可向函数sorted()传递参数reverse=True。</p><p><strong>倒着打印列表</strong></p><p>要<strong>反转</strong>列表元素的排列顺序，可使用方法reverse()。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>] </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br><span class="line">cars.reverse() </span><br><span class="line"><span class="built_in">print</span>(cars) </span><br></pre></td></tr></tbody></table></figure><p>方法reverse()永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此</p><p>只需对列表再次调用reverse()即可。</p><p><strong>确定列表的长度</strong></p><p>使用函数len()可快速获悉列表的长度。在下面的示例中，列表包含4个元素，因此其长度为4：</p><p>&gt;&gt;&gt; <strong>cars = [‘bmw’, ‘audi’, ‘toyota’, ‘subaru’]</strong></p><p>&gt;&gt;&gt; <strong>len(cars)</strong></p><h2 id="2-字典"><a href="#2-字典" class="headerlink" title="2.字典"></a>2.字典</h2><p>在Python中，字典是一系列键—值对。字典中的元素是无序的。字典中的key必须是不可变对象。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何Python对象用作字典中的值。key不允许重复，value允许重复。</p><p>在Python中，字典用放在花括号{}中的一系列键—值对表示，如前面的示例所示：</p><p>alien_0 = {‘color’: ‘green’, ‘points’: 5} </p><p>键—值对是两个相关联的值。指定键时，Python将返回与之相关联的值。键和值之间用冒号</p><p>分隔，而键—值对之间用逗号分隔。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1={"name":"张三","name":"李四"}</span><br><span class="line">print(dict1)</span><br><span class="line">dict1={"name":"张三","nickname":"张三"}</span><br><span class="line">print(dict1)</span><br></pre></td></tr></tbody></table></figure><p>{‘name’: ‘李四’}<br>{‘name’: ‘张三’, ‘nickname’: ‘张三’}</p><p><strong>字典元素的获取</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = {<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>} </span><br><span class="line">new_points = alien_0[<span class="string">'points'</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"You just earned "</span> + <span class="built_in">str</span>(new_points) + <span class="string">" points!"</span>) </span><br><span class="line"><span class="built_in">print</span>(alien_0.get(point))  //使用.get()来获取字典元素</span><br></pre></td></tr></tbody></table></figure><h5 id="添加键—值对"><a href="#添加键—值对" class="headerlink" title="添加键—值对"></a>添加键—值对</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = {<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>} </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">'x_position'</span>] = <span class="number">0</span> </span><br><span class="line">alien_0[<span class="string">'y_position'</span>] = <span class="number">25</span> </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br></pre></td></tr></tbody></table></figure><p>我们首先定义了前面一直在使用的字典，然后打印这个字典，以显示其信息。</p><p>我们在这个字典中新增了两个键—值对，打印修改后的字典时，将看到这两个新增的键—值对</p><h5 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h5><p>要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。例如，</p><p>假设随着游戏的进行，需要将一个外星人从绿色改为黄色：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = {<span class="string">'color'</span>: <span class="string">'green'</span>} </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The alien is "</span> + alien_0[<span class="string">'color'</span>] + <span class="string">"."</span>) </span><br><span class="line">alien_0[<span class="string">'color'</span>] = <span class="string">'yellow'</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The alien is now "</span> + alien_0[<span class="string">'color'</span>] + <span class="string">"."</span>) </span><br></pre></td></tr></tbody></table></figure><p>我们首先定义了一个表示外星人alien_0的字典，其中只包含这个外星人的颜色。接下</p><p>来，我们将与键’color’相关联的值改为’yellow’。输出表明，这个外星人确实从绿色变成</p><p>了黄色：</p><p>The alien is green. </p><p>The alien is now yellow. </p><p><strong>删除</strong></p><p>对于字典中不再需要的信息，可使用del语句将相应的键—值对彻底删除。使用del语句时，</p><p>必须指定字典名和要删除的键.</p><p>例如，下面的代码从字典alien_0中删除键’points’及其值：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = {<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>} </span><br><span class="line"><span class="built_in">print</span>(alien_0) <span class="comment">#{'color': 'green', 'points': 5} </span></span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">'points'</span>] </span><br><span class="line"><span class="built_in">print</span>(alien_0) <span class="comment">#{'color': 'green'}</span></span><br></pre></td></tr></tbody></table></figure><p>Python将键’points’从字典alien_0中删除，同时删除与这个键相关联的值。</p><p>输出表明，键’points’及其值5已从字典中删除，但其他键—值对未受影响：</p><h5 id="遍历所有的键—值对"><a href="#遍历所有的键—值对" class="headerlink" title="遍历所有的键—值对"></a><strong>遍历所有的键—值对</strong></h5><p>探索各种遍历方法前，先来看一个新字典，它用于存储有关网站用户的信息。下面的字典存</p><p>储一名用户的用户名、名和姓：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_0 = { </span><br><span class="line"> <span class="string">'username'</span>: <span class="string">'efermi'</span>, </span><br><span class="line"> <span class="string">'first'</span>: <span class="string">'enrico'</span>, </span><br><span class="line"> <span class="string">'last'</span>: <span class="string">'fermi'</span>, </span><br><span class="line"> } </span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items(): </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\nKey: "</span> + key) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Value: "</span> + value) </span><br></pre></td></tr></tbody></table></figure><p>要编写用于遍历字典的for循环，可声明两个变量，用于存储键—值对中的键和值。</p><p>对于这两个变量，可使用任何名称。下面的代码使用了简单的变量名，这完全可行：</p><p>for k, v in user_0.items() </p><p>for语句的第二部分包含字典名和方法<strong>items()，它返回一个键—值对列表。</strong>接下来，</p><p><strong>遍历字典中的所有键</strong></p><p>在不需要使用字典中的值时，方法**keys()**很有用。下面来遍历字典favorite_languages，并</p><p>将每个被调查者的名字都打印出来：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = {</span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br></pre></td></tr></tbody></table></figure><p>提取字典favorite_languages中的所有键，并依次将它们存储到变量name中。输出列出了每个被调查者的名字：</p><p>Jen<br>Sarah<br>Edward<br>Phil</p><p>遍历字典时，会默认遍历所有的键，因此，如果将上述代码中的for name in favorite_ </p><p>languages.keys():替换为for name in favorite_languages:，输出将不变。</p><p>如果显式地使用方法keys()可让代码更容易理解，你可以选择这样做，但如果你愿意，也可省略它。</p><p>6.3.3 <strong>按顺序遍历字典中的所有键</strong></p><p>字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。</p><p>这不是问题，因为通常你想要的只是获取与键相关联的正确的值。</p><p>要以特定的顺序返回元素，一种办法是在for循环中对返回的键进行排序。为此，可使用函</p><p>数sorted()来获得按特定顺序排列的键列表的副本：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = {</span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.keys()):</span><br><span class="line">    <span class="built_in">print</span>(name.title() + <span class="string">", thank you for taking the poll."</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这条for语句类似于其他for语句，但对方法dictionary.keys()的结果调用了函数sorted()。</p><p>这让Python列出字典中的所有键，并在遍历前对这个列表进行排序。输出表明，按顺序显示了所</p><p>有被调查者的名字：</p><p>Edward, thank you for taking the poll. </p><p>Jen, thank you for taking the poll. </p><p>Phil, thank you for taking the poll. </p><p>Sarah, thank you for taking the poll. </p><p>6.3.4 <strong>遍历字典中的所有值</strong></p><p>如果你感兴趣的主要是字典包含的值，可使用方法values()，它返回一个值列表，而不包含</p><p>任何键。例如，如果我们想获得一个这样的列表，即其中只包含被调查者选择的各种语言，而不</p><p>包含被调查者的名字，可以这样做：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = {</span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span>,</span><br><span class="line">}</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The following languages have been mentioned:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这条for语句提取字典中的每个值，并将它们依次存储到变量language中。通过打印这些值，</p><p>就获得了一个列表，其中包含被调查者选择的各种语言：</p><p>The following languages have been mentioned:<br>Python<br>C<br>Ruby<br>Python</p><p>这种做法提取字典中所有的值，而没有考虑是否重复。涉及的值很少时，这也许不是问题，</p><p>但如果被调查者很多，最终的列表可能包含大量的重复项。</p><h2 id="3-元组-tuple"><a href="#3-元组-tuple" class="headerlink" title="3.元组(tuple)"></a>3.元组(tuple)</h2><p>列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网</p><p>站的用户列表或游戏中的角色列表至关重要。然而，有时候你需要创建一系列不可修改的元素，</p><p>元组可以满足这种需求。<strong>Python将不能修改的值称为不可变的，而不可变的列表被称为元组。</strong></p><p><strong>不可变序列没有增删改的操作。</strong></p><h5 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a><strong>定义元组</strong></h5><p>元组看起来犹如列表，但使用<strong>圆括号而不是方括号</strong>来标识。定义元组后，就可以使用索引来</p><p>访问其元素，就像访问列表元素一样。</p><p>例如，如果有一个大小不应改变的矩形，可将其长度和宽度存储在一个元组中，从而确保它</p><p>们是不能修改的：</p><p>dimensions.py </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>) </span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>]) </span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>]) </span><br></pre></td></tr></tbody></table></figure><p>我们首先定义了元组dimensions，为此我们使用了圆括号而不是方括号。接下来，我</p><p>们分别打印该元组的各个元素，使用的语法与访问列表元素时使用的语法相同：</p><p>200 </p><p>50 </p><p><strong>只包含一个元组元素需要使用逗号和小括号</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t=(10,)</span><br></pre></td></tr></tbody></table></figure><p>下面来尝试修改元组dimensions中的一个元素，看看结果如何：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>) </span><br><span class="line">dimensions[<span class="number">0</span>] = <span class="number">250</span> </span><br></pre></td></tr></tbody></table></figure><p>我们试图修改第一个元素的值，导致Python返回类型错误消息。由于试图修改元组的</p><p>操作是被禁止的，因此Python指出不能给元组的元素赋值：</p><p>TypeError: ‘tuple’ object does not support item assignment </p><h5 id="遍历元组中的所有值"><a href="#遍历元组中的所有值" class="headerlink" title="遍历元组中的所有值"></a><strong>遍历元组中的所有值</strong></h5><p>像列表一样，也可以使用for循环来遍历元组中的所有值：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line"><span class="built_in">print</span>(dimension) </span><br></pre></td></tr></tbody></table></figure><h5 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a><strong>修改元组变量</strong></h5><p>虽然不能修改元组的元素，但可以给存储元组的变量赋值。因此，如果要修改前述矩形的尺</p><p>寸，可<strong>重新定义整个元组：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Original dimensions:"</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line"><span class="built_in">print</span>(dimension) </span><br><span class="line">    </span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\nModified dimensions:"</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line"><span class="built_in">print</span>(dimension) </span><br></pre></td></tr></tbody></table></figure><p>给元组变量赋值是合法的，相比于列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不变，可使用元组。</p><h2 id="4-集合-set"><a href="#4-集合-set" class="headerlink" title="4.集合(set)"></a>4.集合(set)</h2><p>为剔除重复项，可使用<strong>集合（set）</strong>。</p><p>集合是可变类型的序列。集合是没有value的字典。</p><p>集合类似于列表，但每个元素都必须是独一无二的：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = {</span><br><span class="line">    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line">    <span class="string">'phil'</span>: <span class="string">'python'</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The following languages have been mentioned:"</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()):</span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br></pre></td></tr></tbody></table></figure><p>通过对包含重复元素的列表调用set()，可让Python找出列表中独一无二的元素，并使用这</p><p>些元素来创建一个集合。我们使用了**set()**来提取favorite_languages.values()中不同的语言。</p><p>结果是一个不重复的列表，其中列出了被调查者提及的所有语言：</p><p>The following languages have been mentioned: </p><p>Python </p><p>C </p><p>Ruby </p><h5 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a><strong>创建集合</strong></h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s={'python','hello',90}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202071710424.png?raw=true" alt="image-20220126223813796"></p><h5 id="集合间的关系"><a href="#集合间的关系" class="headerlink" title="集合间的关系"></a><strong>集合间的关系</strong></h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1={10,20,30,40}</span><br><span class="line">s2={50,60,70,80}</span><br><span class="line">s3={10,20}</span><br><span class="line">print(s1==s2)  #判断集合是否相等</span><br><span class="line">print(s3.issubset(s1)) #判断一个集合是否是另一个集合的子集</span><br></pre></td></tr></tbody></table></figure><p>False<br>True</p><h5 id="集合的数据操作"><a href="#集合的数据操作" class="headerlink" title="集合的数据操作"></a>集合的数据操作</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1={10,20,30,40}</span><br><span class="line">s2={20,30,40,50,60}</span><br><span class="line"></span><br><span class="line">print(s1&amp;s2) #交集</span><br><span class="line">print(s1|s2) #并集</span><br><span class="line">print(s1-s2) #差集</span><br><span class="line">print(s1^s2) #对称差集</span><br></pre></td></tr></tbody></table></figure><p>{40, 20, 30}<br>{40, 10, 50, 20, 60, 30}<br>{10}<br>{50, 10, 60}</p><h2 id="5-Python字符串"><a href="#5-Python字符串" class="headerlink" title="5.Python字符串"></a>5.Python字符串</h2><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202071711670.png?raw=true" alt="image-20220126232723742"></p><h5 id="1）使用"><a href="#1）使用" class="headerlink" title="1）使用%"></a>1）使用%</h5><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">"我叫 %s 今年 %s 岁!"</span> % (<span class="string">'小明'</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (s1)</span><br><span class="line"></span><br><span class="line">name = <span class="string">'小明'</span></span><br><span class="line">s2 = <span class="string">"我叫 %s !"</span> % name</span><br><span class="line"><span class="built_in">print</span> (s2)</span><br></pre></td></tr></tbody></table></figure><p>其中 <strong>%s</strong> 就是模板中的占位符，表示这个位置先占着，待会儿要有数据填入到这里。</p><p>然后再提供一个元组，里面依次存放需要填入到 %s 位置 的数据。</p><p>%s 是一种格式化符号， Python 解释器 看到 %s ， 就会调用内置函数 str()，并将对应的 格式化对象 作为 参数传入 ， 返回的结果字符串填入对应占位符。</p><p>简单说 %s 位置填入的结果，就是调用str函数的返回值。</p><p><code>%10s</code> 中的 <code>10</code> 就是指定了格式化结果至少10个字符。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'a：%10s '</span> % <span class="number">100000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'b：%10s '</span> % <span class="number">10000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c：%10s '</span> % <span class="number">1000</span>)</span><br></pre></td></tr></tbody></table></figure><p>如果我们希望是左边对齐，而不是右边对齐，就可以加一个 <code>-</code> ，像这样</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'a：%-10s '</span> % <span class="number">100000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'b：%-10s '</span> % <span class="number">10000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c：%-10s '</span> % <span class="number">1000</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'薪资：%.2f 元'</span> % <span class="number">10000.32744</span>)</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>符  号</th><th>描述</th></tr></thead><tbody><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%f</td><td>格式化浮点数字，可指定小数点后的精度</td></tr></tbody></table><h5 id="2）使用format"><a href="#2）使用format" class="headerlink" title="2）使用format()"></a>2）使用format()</h5><p>另一种是使用<strong>format函数</strong>，如图所示。通过大括号占位，可以通过大括号内数字指定顺序。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">"我叫{}今年{}岁!"</span> .<span class="built_in">format</span>(<span class="string">'小明'</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (s1)</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">"我叫{0}今年{1}岁!"</span> .<span class="built_in">format</span>(<span class="string">'小明'</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (s1)</span><br></pre></td></tr></tbody></table></figure><h5 id="3-f-string-格式化"><a href="#3-f-string-格式化" class="headerlink" title="3)f-string 格式化"></a>3)f-string 格式化</h5><p>到了Python3.6 ，有另外一种更方便的方式: f-string 格式化</p><p>就是在字符串模板前面加上f，然后占位符使用{} ,里面直接放入对应的数据对象</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">salary = <span class="built_in">input</span>(<span class="string">'请输入薪资：'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算出缴税额，存入变量tax</span></span><br><span class="line">tax = <span class="built_in">int</span>(salary) *<span class="number">25</span>/<span class="number">100</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算出税后工资，存入变量aftertax</span></span><br><span class="line">aftertax = <span class="built_in">int</span>(salary) *<span class="number">75</span>/<span class="number">100</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'税前薪资是：<span class="subst">{salary}</span>元， 缴税：<span class="subst">{tax}</span>元， 税后薪资是：<span class="subst">{aftertax}</span>元'</span>)</span><br></pre></td></tr></tbody></table></figure><p>**f’a：{a1:10} ‘**指定了 宽度为10 个字符， 如果填入的字符串不足10个字符，就在前面加上空格</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="number">100000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'a：<span class="subst">{a1:<span class="number">10</span>}</span> '</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'b：<span class="subst">{<span class="number">10000</span>:<span class="number">10</span>}</span> '</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'c：<span class="subst">{<span class="number">1000</span>}</span> '</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>字符串的编码和解码</strong>（爬虫里经常用到，这里稍微提一下）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s='天涯共此时'</span><br><span class="line">byte=s.encode(encoding='UTF-8') #编码</span><br><span class="line">print(byte.decode(encoding='UTF-8')) #解码</span><br><span class="line">#编码和解码的格式要一样</span><br></pre></td></tr></tbody></table></figure><p>题目</p><p>请写一段代码，运行的时候，提示用户 <strong>输入你的名字</strong></p><p>在用户输入名字后，再提示用户 <strong>输入你的年龄</strong></p><p>在用户输入后，显示</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你的名字是：xxxx， 你的年龄是yy</span><br></pre></td></tr></tbody></table></figure><p>其中xxxx是刚才用户输入的名字 yy是刚才用户输入的年龄</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = input('请输入您的姓名：')</span><br><span class="line">age = input('请输入您的年龄：')</span><br><span class="line"></span><br><span class="line">print(f'你的名字是{name},你的年龄是{age}')</span><br></pre></td></tr></tbody></table></figure><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>要求用户输入圆的半径，要求输出圆的周长和面积（精确到小数点后三位），圆周率用math.pi</p><p>已知：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.pi)<span class="comment">#3.141592653589793</span></span><br></pre></td></tr></tbody></table></figure><p>参考答案：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">radius = float(input('请输入一个圆的半径：'))</span><br><span class="line">c = 2*math.pi*radius</span><br><span class="line">s = math.pi*radius**2</span><br><span class="line">print(f'这个圆的周长是{c:.3f},面积是{s:.3f}')</span><br></pre></td></tr></tbody></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>下面的字典里面记录了一个游戏系统中用户的信息。 其中key 是用户的ID， value 是另外一个字典，记录了用户名，用户等级，金币数量和动作。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">members = {</span><br><span class="line">    <span class="number">1</span>: {<span class="string">'name'</span>: <span class="string">'WY'</span>, <span class="string">'level'</span>: <span class="number">100</span>, <span class="string">'coins'</span>: <span class="number">6666</span>, <span class="string">"act"</span>: [<span class="string">"run"</span>,<span class="string">"walk"</span>,<span class="string">"fly"</span>]},</span><br><span class="line">    <span class="number">2</span>: {<span class="string">'name'</span>: <span class="string">'ZWM'</span>, <span class="string">'level'</span>: <span class="number">55</span>, <span class="string">'coins'</span>: <span class="number">330</span>, <span class="string">"act"</span>: [<span class="string">"hit"</span>]},</span><br><span class="line">    <span class="number">3</span>: {<span class="string">'name'</span>: <span class="string">'CYT'</span>, <span class="string">'level'</span>: <span class="number">66</span>, <span class="string">'coins'</span>: <span class="number">340</span>, <span class="string">"act"</span>: [<span class="string">"fly"</span>, <span class="string">"hit"</span>]},</span><br><span class="line">    <span class="number">4</span>: {<span class="string">'name'</span>: <span class="string">'ZYZ'</span>, <span class="string">'level'</span>: <span class="number">33</span>, <span class="string">'coins'</span>: <span class="number">3200</span>, <span class="string">"act"</span>: [<span class="string">"run"</span>, <span class="string">"fly"</span>]},</span><br><span class="line">    <span class="number">5</span>: {<span class="string">'name'</span>: <span class="string">'LZY'</span>, <span class="string">'level'</span>: <span class="number">44</span>, <span class="string">'coins'</span>: <span class="number">330</span>, <span class="string">"act"</span>: [<span class="string">"run"</span>,<span class="string">"hit"</span>]}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要求大家写一个程序，运行的时候先显示如下主菜单</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请选择操作选项：</span><br><span class="line">   <span class="number">1</span> 查看某个用户的账号信息</span><br><span class="line">   <span class="number">2</span> 为用户添加或者删除动作</span><br><span class="line">   <span class="number">3</span> 列出所有用户信息</span><br><span class="line">   <span class="number">0</span> 退出</span><br></pre></td></tr></tbody></table></figure><p>如果用户选择 1 选项， 再次提示用户输入账号名， 用户输入账号后，显示该用户的 ID,用户等级，金币数量和技能。如果不存在，要求输出’对不起，账号不存在.’</p><p>如果用户选择 2 选项， 提示用户输入账号名。 用户输入后，要检查该账号名是否已经存在，如果不存在，则提示用户重新输入。存在，则接着提示用户输入对”动作“要执行的是添加还是删除操作，然后用输入具体要添加还是删除的元素</p><p>如果用户选择 3 选项，则打印出当前用户表里所有用户的信息</p><p>如果用户选择 0 选项， 则退出程序。</p><p>只要不是选择退出，用户操作完后，再次进入主菜单，让用户再次选择。如此<strong>循环</strong>，<strong>直到用户选择0 退出。</strong></p><p>参考答案：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">members = {</span><br><span class="line">        <span class="number">1</span>: {<span class="string">'name'</span>: <span class="string">'WY'</span>, <span class="string">'level'</span>: <span class="number">100</span>, <span class="string">'coins'</span>: <span class="number">6666</span>, <span class="string">"act"</span>: [<span class="string">"run"</span>, <span class="string">"walk"</span>, <span class="string">"fly"</span>]},</span><br><span class="line">        <span class="number">2</span>: {<span class="string">'name'</span>: <span class="string">'ZWM'</span>, <span class="string">'level'</span>: <span class="number">55</span>, <span class="string">'coins'</span>: <span class="number">330</span>, <span class="string">"act"</span>: [<span class="string">"hit"</span>]},</span><br><span class="line">        <span class="number">3</span>: {<span class="string">'name'</span>: <span class="string">'CYT'</span>, <span class="string">'level'</span>: <span class="number">66</span>, <span class="string">'coins'</span>: <span class="number">340</span>, <span class="string">"act"</span>: [<span class="string">"fly"</span>, <span class="string">"hit"</span>]},</span><br><span class="line">        <span class="number">4</span>: {<span class="string">'name'</span>: <span class="string">'ZYZ'</span>, <span class="string">'level'</span>: <span class="number">33</span>, <span class="string">'coins'</span>: <span class="number">3200</span>, <span class="string">"act"</span>: [<span class="string">"run"</span>, <span class="string">"fly"</span>]},</span><br><span class="line">        <span class="number">5</span>: {<span class="string">'name'</span>: <span class="string">'LZY'</span>, <span class="string">'level'</span>: <span class="number">44</span>, <span class="string">'coins'</span>: <span class="number">330</span>, <span class="string">"act"</span>: [<span class="string">"run"</span>, <span class="string">"hit"</span>]} }</span><br><span class="line"></span><br><span class="line">members2 = {}</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> members.items():</span><br><span class="line">    name = value[<span class="string">"name"</span>]</span><br><span class="line">    value[<span class="string">"id"</span>] = key</span><br><span class="line">    members2[name] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    menu =<span class="string">"""</span></span><br><span class="line"><span class="string">操作选项：</span></span><br><span class="line"><span class="string">    1 查看某个用户的账号信息</span></span><br><span class="line"><span class="string">    2 为用户添加或者删除动作</span></span><br><span class="line"><span class="string">    3 列出所有用户信息</span></span><br><span class="line"><span class="string">    0 退出</span></span><br><span class="line"><span class="string">请输入操作：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    choice = <span class="built_in">input</span>(menu)</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">'1'</span>:</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">"请输入查找的用户："</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> members2:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"对不起，账号<span class="subst">{name}</span>不存在."</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            info = members2[name]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f'账号: <span class="subst">{name}</span> , ID : <span class="subst">{info[<span class="string">"id"</span>]}</span> , 等级：<span class="subst">{info[<span class="string">"level"</span>]}</span> , 金币：<span class="subst">{info[<span class="string">"coins"</span>]}</span> ,技能：<span class="subst">{info[<span class="string">"act"</span>]}</span>'</span>)</span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">'2'</span>:</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">"请输入修改动作的用户名："</span>)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> members2:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"对不起，<span class="subst">{name}</span>不存在."</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        act_info = members2[name][<span class="string">"act"</span>]</span><br><span class="line">        action = <span class="built_in">input</span>(<span class="string">"请选择对技能进行添加或删除"</span>)</span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">'添加'</span>:</span><br><span class="line">            <span class="built_in">print</span>(act_info)</span><br><span class="line">            act = <span class="built_in">input</span>(<span class="string">"请输入添加的技能"</span>)</span><br><span class="line">            act_info.append(act)</span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">'删除'</span>:</span><br><span class="line">            <span class="built_in">print</span>(act_info)</span><br><span class="line">            act = <span class="built_in">input</span>(<span class="string">"请输入删除的技能"</span>)</span><br><span class="line">            act_info.remove(act)</span><br><span class="line"></span><br><span class="line">        info = members2[name]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'修改后的：账号: <span class="subst">{name}</span> , ID : <span class="subst">{info[<span class="string">"id"</span>]}</span> , 等级：<span class="subst">{info[<span class="string">"level"</span>]}</span> , 金币：<span class="subst">{info[<span class="string">"coins"</span>]}</span> ,技能：<span class="subst">{info[<span class="string">"act"</span>]}</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">'3'</span>:</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> members2.values():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f'账号: <span class="subst">{value[<span class="string">"name"</span>]}</span> , ID : <span class="subst">{value[<span class="string">"id"</span>]}</span> , 等级：<span class="subst">{value[<span class="string">"level"</span>]}</span> , 金币：<span class="subst">{value[<span class="string">"coins"</span>]}</span> ,技能：<span class="subst">{value[<span class="string">"act"</span>]}</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">'0'</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-选做"><a href="#3-选做" class="headerlink" title="*3(选做)"></a>*3(选做)</h4><p>有一个列表：arr = [64, 34, 25, 12, 22, 11, 90]，现在要求对里面的元素从小到大排列，要求输出排序后的列表</p><p>不能使用sorted()或者sort()函数</p><p>参考答案</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">99</span>]</span><br><span class="line">n = <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="comment"># Last i elements are already in place</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n - i - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> arr[j] &gt; arr[j + <span class="number">1</span>]:</span><br><span class="line">            arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python函数与面向对象</title>
      <link href="/2022/02/07/python%E7%AC%AC%E4%B8%89%E8%AF%BE/"/>
      <url>/2022/02/07/python%E7%AC%AC%E4%B8%89%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数"><a href="#1-函数" class="headerlink" title="1.函数"></a>1.函数</h2><h4 id="1-1-定义函数"><a href="#1-1-定义函数" class="headerlink" title="1.1 定义函数"></a><strong>1.1 定义函数</strong></h4><p>下面是一个打印问候语的简单函数，名为greet_user()：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>():</span></span><br><span class="line">    <span class="string">"""显示简单的问候语"""</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello!"</span>)</span><br><span class="line">    </span><br><span class="line">greet_user()</span><br></pre></td></tr></tbody></table></figure><p><strong>def</strong> 是关键字 表示定义一个函数</p><p>后面是函数的<strong>名字</strong>，紧接着后面需要一个<strong>括号</strong> ，这个括号中间，根据需要还可以有 <strong>参数</strong>,这里我们先不讲它</p><p>最后是一个<strong>冒号</strong>，下面的缩进的代码表示这个函数名字代表的具体动作是什么，称之为<strong>函数体</strong>。</p><p>函数体的代码是需要缩进的。我们建议缩进四个空格</p><p>greet_user() 就叫 <strong>调用函数</strong> greet_user ，有时也叫做 <strong>执行函数</strong> greet_user。</p><p>当解释器 执行到 这行调用函数的代码时，就会跑到 函数 greet_user 里面，去执行函数里面的语句。</p><p>函数必须先定义，后面才能调用。</p><p>函数可以调用任意次。</p><h4 id="5-2-函数的参数"><a href="#5-2-函数的参数" class="headerlink" title="5.2 函数的参数"></a><strong>5.2 函数的参数</strong></h4><p>只需稍作修改，就可以让函数greet_user()不仅向用户显示Hello!，还将用户的名字用作抬头。为此，可在函数定义def greet_user()的括号内添加username。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="string">"""显示简单的问候语"""</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    </span><br><span class="line">greet_user(<span class="string">'jesse'</span>)</span><br></pre></td></tr></tbody></table></figure><p>参数的作用 就是： <strong>提供 函数完成功能 所必须的信息</strong></p><p>参数可以没有，可以是一个，也可以是多个。参数之间用<strong>逗号</strong>隔开。</p><h5 id="实参和形参"><a href="#实参和形参" class="headerlink" title="实参和形参"></a><strong>实参和形参</strong></h5><p>在函数greet_user()的定义中，<strong>变量username是一个形参</strong>——函数完成其工作所需的一项信</p><p>息。在代码greet_user(‘jesse’)中，<strong>值’jesse’是一个实参</strong>。实参是调用函数时传递给函数的信</p><p>息。我们调用函数时，将要让函数使用的信息放在括号内。在greet_user(‘jesse’)中，将实参</p><p>‘jesse’传递给了函数greet_user()，这个值被存储在形参username中。</p><h5 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a><strong>位置实参</strong></h5><p>你调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，</p><p>最简单的关联方式是基于实参的顺序。这种关联方式被称为位置实参。</p><p>来看一个显示宠物信息的函数。这个函数指出一个宠物属于哪种动物以及它叫什么名字，如下所示：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span></span><br><span class="line">    <span class="string">"""显示宠物的信息"""</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name + <span class="string">"."</span>)</span><br><span class="line">    </span><br><span class="line">describe_pet(<span class="string">'hamster'</span>, <span class="string">'harry'</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a><strong>关键字实参</strong></h5><p>关键字实参是传递给函数的名称—值对。你直接在实参中将名称和值关联起来了，因此向函</p><p>数传递实参时不会混淆。</p><p>关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span> </span><br><span class="line"><span class="string">"""显示宠物的信息"""</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I have a "</span> + animal_type + <span class="string">"."</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name + <span class="string">"."</span>) </span><br><span class="line"></span><br><span class="line">describe_pet(animal_type=<span class="string">'hamster'</span>, pet_name=<span class="string">'harry'</span>) </span><br></pre></td></tr></tbody></table></figure><p>函数describe_pet()还是原来那样，但调用这个函数时，我们向Python明确地指出了各个实</p><p>参对应的形参。看到这个函数调用时，Python知道应该将实参’hamster’和’harry’分别存储在形</p><p>参animal_type和pet_name中。输出正确无误，它指出我们有一只名为Harry的仓鼠。</p><p><strong>关键字实参的顺序无关紧要</strong>，因为Python知道各个值该存储到哪个形参中。下面两个函数调</p><p>用是等效的：</p><p>describe_pet(animal_type=’hamster’, pet_name=’harry’) </p><p>describe_pet(pet_name=’harry’, animal_type=’hamster’) </p><p>注意 使用关键字实参时，务必准确地指定函数定义中的形参名。</p><p><em><strong>练习</strong></em></p><p>请开发一个函数，该函数 接受两个字符串参数，</p><p>我们的函数需要 获取参数中的人名和年龄，并打印出名字和年龄。调用后的结果如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">他的名字是：关羽</span><br><span class="line">他的年龄是：28</span><br></pre></td></tr></tbody></table></figure><p>调用函数传参数时，分别使用 <strong>指定参数名调用和 不指定参数名调用</strong> 的方式。</p><h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><p>这种前面加<strong>一个星号</strong>的参数，称之为可变参数，在调用该函数的时候，Python解释器会创建一个 tuple 赋值给这个参数变量。并且会把 传入的数据对象 放到这个tuple对象里面。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">printAge</span>(<span class="params">*students</span>) :</span></span><br><span class="line">    <span class="keyword">for</span> student <span class="keyword">in</span> students:</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">f'学生：<span class="subst">{student}</span>‘)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">printAge('</span>张飞<span class="string">', '</span>典韦<span class="string">', '</span>关羽<span class="string">')</span></span><br></pre></td></tr></tbody></table></figure><p>调用代码执行的时候，Python解释器创建一个 tuple 赋值给这个 students，里面存放了 ‘张飞’, ‘典韦’, ‘关羽’ 三个字符串对象作为元素。</p><p>这种前面加<strong>2个星号</strong>的参数，称之为关键字可变参数，</p><p>在调用该函数的时候，Python解释器会创建一个 dict （字典） 赋值给这个参数变量。</p><p>传入的参数对象，必须是像 <code>name=value</code>这种 带参数名和参数值的， 放到dict对象时，参数名是字典元素的key，参数值是字典元素的value。</p><p>比如，我们要实现一个函数，可以输入不定数量的学生信息，包括姓名和年龄。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addStudents</span>(<span class="params">**students</span>):</span></span><br><span class="line">    <span class="keyword">for</span> name,age <span class="keyword">in</span> students.items():</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">        <span class="built_in">print</span>(age)</span><br><span class="line"></span><br><span class="line">addStudents(李白=<span class="number">20</span>, 杜甫=<span class="number">24</span>)</span><br><span class="line">addStudents(Jodan=<span class="number">45</span>, James=<span class="number">32</span>, onil=<span class="number">40</span>)</span><br></pre></td></tr></tbody></table></figure><p><em><strong>练习</strong></em></p><p>请写一个函数 add_all，该函数参数为任意数量的数字，请在函数中计算这些数字的和</p><h4 id="5-3默认值"><a href="#5-3默认值" class="headerlink" title="5.3默认值"></a>5.3默认值</h4><p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用</p><p>指定的实参值；否则，将使用形参的默认值。因此，给形参指定默认值后，可在函数调用中省略相应的实参。</p><p>使用默认值可简化函数调用，还可清楚地指出函数的典型用法。</p><p>例如，如果你发现调用describe_pet()时，描述的大都是小狗，就可将形参animal_type的默</p><p>认值设置为’dog’。这样，调用describe_pet()来描述小狗时，就可不提供这种信息：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span>(<span class="params">pet_name, animal_type=<span class="string">'dog'</span></span>):</span> </span><br><span class="line"><span class="string">"""显示宠物的信息"""</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I have a "</span> + animal_type + <span class="string">"."</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name + <span class="string">"."</span>) </span><br><span class="line"></span><br><span class="line">describe_pet(pet_name=<span class="string">'willie'</span>) </span><br></pre></td></tr></tbody></table></figure><h4 id="5-4返回值"><a href="#5-4返回值" class="headerlink" title="5.4返回值"></a><strong>5.4返回值</strong></h4><blockquote><p>函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回</p><p>的值被称为返回值。在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能</p><p>够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。</p></blockquote><p>下面来看一个函数，它接受名和姓并返回整洁的姓名：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span> </span><br><span class="line"><span class="string">"""返回整洁的姓名"""</span> </span><br><span class="line">full_name = first_name + <span class="string">' '</span> + last_name </span><br><span class="line"><span class="keyword">return</span> full_name</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">'jimi'</span>, <span class="string">'hendrix'</span>) </span><br><span class="line"><span class="built_in">print</span>(musician) </span><br></pre></td></tr></tbody></table></figure><p>函数get_formatted_name()的定义通过形参接受名和姓。它将姓和名合而为一，在它</p><p>们之间加上一个空格，并将结果存储在变量full_name中。然后，将full_name的值<strong>返回(用return)<strong>到函数调用行。调用返回值的函数时，</strong>需要提供一个变量，用于存储返回的值</strong>。在这里，将返回值存储在了变量musician中。输出为整洁的姓名</p><p><em><strong>练习</strong></em></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squarep1</span>(<span class="params">num1,num2</span>):</span></span><br><span class="line">    ret = num1**<span class="number">2</span> + num2**<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line">ret = squarep1(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>在下面的代码中进行补充，使得到的结果和上面的相同</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squarep2</span>(<span class="params">num1,num2</span>):</span></span><br><span class="line">    ret = num1**<span class="number">2</span> + num2**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">ret = squarep2(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></tbody></table></figure><h4 id="5-5常用-内置函数"><a href="#5-5常用-内置函数" class="headerlink" title="5.5常用 内置函数"></a>5.5常用 内置函数</h4><p><img src="/.com//jf\上课用\WY\2020-11-20_172244.png" alt="2020-11-20_172244"></p><h5 id="int"><a href="#int" class="headerlink" title="int()"></a>int()</h5><p>int 函数 经常被我们用来把一个字符串转化为对应的整数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">'1000'</span>)   <span class="comment"># 返回整数1000</span></span><br></pre></td></tr></tbody></table></figure><p>也经常用来把一个小数转化为对应的整数，去掉其中的小数部分</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="number">3456.23</span>)  <span class="comment"># 返回整数3456</span></span><br></pre></td></tr></tbody></table></figure><h5 id="float"><a href="#float" class="headerlink" title="float()"></a>float()</h5><p>float 函数 用来把一个字符串转化为对应的小数（浮点数）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="string">'1000'</span>)    <span class="comment"># 返回 浮点数 1000.0</span></span><br><span class="line"><span class="built_in">float</span>(<span class="string">'6.345'</span>)   <span class="comment"># 返回 浮点数 6.345</span></span><br></pre></td></tr></tbody></table></figure><p>也可以把一个整数对象转化为对应的小数对象</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">float</span>(<span class="number">1000</span>)  <span class="comment"># 返回浮点数 1000.0</span></span><br></pre></td></tr></tbody></table></figure><h5 id="str"><a href="#str" class="headerlink" title="str()"></a>str()</h5><p>str 函数 用来得到一个对象的字符串表示。</p><p>经常被我们用来把数字转化为对应的字符串表示的数字</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="number">1000</span>)   <span class="comment"># 返回字符串 '1000'</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">1000.23</span>)   <span class="comment"># 返回字符串 '1000.23'</span></span><br></pre></td></tr></tbody></table></figure><h5 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h5><p>len 函数 可以得到一个数据对象的长度，通常用来获取 字符串、列表、元组、字典等类型对象的元素个数。</p><p>比如</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="built_in">len</span>(<span class="string">'你好！'</span>))<span class="comment"># 可以得到字符串的长度 3</span></span><br></pre></td></tr></tbody></table></figure><h5 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h5><p>type 函数 可以得到一个数据对象类型</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">3</span>)        <span class="comment"># 返回  &lt;class 'int'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>(<span class="string">'hello'</span>)  <span class="comment"># 返回  &lt;class 'str'&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="5-6将函数存储在模块中"><a href="#5-6将函数存储在模块中" class="headerlink" title="5.6将函数存储在模块中"></a>5.6将函数存储在模块中</h4><blockquote><p>函数的优点之一是，使用它们可将代码块与主程序分离。通过给函数指定描述性名称，可让</p><p>主程序容易理解得多。你还可以更进一步，将函数存储在被称为模块的独立文件中，</p><p>再将模块导 入到主程序中。</p><p>通过将函数存储在独立的文件中，可隐藏程序代码的细节，将重点放在程序的高层逻辑上。</p><p>这还能让你在众多不同的程序中重用函数。</p></blockquote><p><strong>import语句</strong>允许在当前运行的程序文件中使用模块中的代码。</p><p><strong>导入整个模块</strong></p><p>要让函数是可导入的，得先创建模块。模块是扩展名为.py的文件，包含要导入到程序中的代码。</p><p>只需编写一条import语句并在其中指定模块名，就可在程序中使用该模块中的所有函数。</p><p>如果你使用这种import语句导入了名为module_name.py的整个模块，就可使</p><p>用下面的语法来使用其中任何一个函数：</p><p><em>module_name.function_name</em>()</p><p>下面来创建一个包含函数make_pizza()的模块。为此，我们将文件pizza.py中除函数</p><p>make_pizza()之外的其他代码都删除：</p><p>pizza.py </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span>(<span class="params">size, *toppings</span>):</span> </span><br><span class="line"><span class="string">"""概述要制作的比萨"""</span> </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">"\nMaking a "</span> + <span class="built_in">str</span>(size) + </span><br><span class="line"> <span class="string">"-inch pizza with the following toppings:"</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"- "</span> + topping) </span><br></pre></td></tr></tbody></table></figure><p>接下来，我们在pizza.py<strong>所在的目录中创建</strong>另一个名为making_pizzas.py的文件，这个文件导</p><p>入刚创建的模块，再调用make_pizza()两次：</p><p>making_pizzas.py </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza </span><br><span class="line">pizza.make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>) </span><br><span class="line">pizza.make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>) </span><br></pre></td></tr></tbody></table></figure><p>在making_pizzas.py中，可以使用pizza.py中定义的所有函数。</p><p>要调用被导入的模块中的函数，可指定导入的模块的名称pizza和函数名make_pizza()，并用</p><p>句点分隔它们。</p><p> <strong>导入特定的函数</strong></p><p>你还可以导入模块中的特定函数，这种导入方法的语法如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name</span><br></pre></td></tr></tbody></table></figure><p>通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_0, function_1, function_2</span><br></pre></td></tr></tbody></table></figure><p>对于前面的making_pizzas.py示例，如果只想导入要使用的函数，代码将类似于下面这样：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza </span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>) </span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>) </span><br></pre></td></tr></tbody></table></figure><p>若使用这种语法，调用函数时就无需使用句点。由于我们在import语句中显式地导入了函数</p><p>make_pizza()，因此调用它时只需指定其名称。</p><p> <strong>使用 as 给函数指定别名</strong></p><blockquote><p>如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名——函数的另一个名称，类似于外号。要给函数指定这种特殊外号，需要在导入它时这样做。</p></blockquote><p>下面给函数make_pizza()指定了别名mp()。这是在import语句中使用make_pizza as mp实现的，</p><p>关键字as将函数重命名为你提供的别名：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp </span><br><span class="line"></span><br><span class="line">mp(<span class="number">16</span>, <span class="string">'pepperoni'</span>) </span><br><span class="line">mp(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>) </span><br></pre></td></tr></tbody></table></figure><p>上面的import语句将函数make_pizza()重命名为mp()；在这个程序中，每当需要调用make_pizza()时，都可简写成mp()，而Python将运行make_pizza()中的代码，这可避免与这个程序可能包含的函数make_pizza()混淆。</p><p>指定别名的通用语法如下：</p><p>from <em>module_name</em> import <em>function_name</em> as <em>fn</em></p><p><strong>使用 as 给模块指定别名</strong></p><p>你还可以给模块指定别名。通过给模块指定简短的别名（如给模块pizza指定别名p），让你</p><p>能够更轻松地调用模块中的函数。相比于pizza.make_pizza()，p.make_pizza()更为简洁：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza <span class="keyword">as</span> p </span><br><span class="line"></span><br><span class="line">p.make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>) </span><br><span class="line">p.make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>) </span><br></pre></td></tr></tbody></table></figure><p>上述import语句给模块pizza指定了别名p，但该模块中所有函数的名称都没变。调用函数</p><p>make_pizza()时，可编写代码p.make_pizza()而不是pizza.make_pizza()，这样不仅能使代码更简</p><p>洁，还可以让你不再关注模块名，而专注于描述性的函数名。这些函数名明确地指出了函数的功</p><p>能，对理解代码而言，它们比模块名更重要。</p><p>给模块指定别名的通用语法如下：</p><p>import <em>module_name as mn</em></p><p><strong>导入模块中的所有函数</strong></p><p>使用星号（*）运算符可让Python导入模块中的所有函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>) </span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>) </span><br></pre></td></tr></tbody></table></figure><p>import语句中的星号让Python将模块pizza中的每个函数都复制到这个程序文件中。由于导入</p><p>了每个函数，可通过名称来调用每个函数，而无需使用句点表示法。然而，使用并非自己编写的</p><p>大型模块时，最好不要采用这种导入方法：如果模块中有函数的名称与你的项目中使用的名称相</p><p>同，可能导致意想不到的结果：Python可能遇到多个名称相同的函数或变量，进而覆盖函数，而</p><p>不是分别导入所有的函数。</p><p>最佳的做法是，要么只<strong>导入你需要使用的函数，要么导入整个模块并使用句点表示法</strong>。这能</p><p>让代码更清晰，更容易阅读和理解。这里之所以介绍这种导入方法，只是想让你在阅读别人编写</p><p>的代码时，如果遇到类似于下面的import语句，能够理解它们：</p><p>from <em>module_name</em> import * </p><h2 id="2-面向对象class"><a href="#2-面向对象class" class="headerlink" title="2.面向对象class"></a>2.面向对象class</h2><blockquote><p>面向对象编程是最有效的软件编写方法之一。在面向对象编程中，你编写表示现实世界中的事物和情景的类，并基于这些类来创建对象。</p><p>编写类时，你定义一大类对象都有的通用行为。基于类创建<strong>对象</strong>时，每个对象都自动具备这种通用行为，然后可根据需要赋予每个对象独特的个性。</p><p>根据类来创建对象被称为<strong>实例化</strong>，这让你能够使用类的实例。编写一些类并创建其实例。指定可在实例中存储什么信息，定义可对这些实例执行哪些操作。</p></blockquote><h4 id="6-1创建类"><a href="#6-1创建类" class="headerlink" title="6.1创建类"></a><strong>6.1创建类</strong></h4><p>使用类几乎可以模拟任何东西。下面来编写一个表示小狗的简单类Dog——它表示的不是特定的小狗，而是任何小狗。对于大多数宠物狗，我们都知道些什么呢？它们都有名字和年龄；我</p><p>们还知道，大多数小狗还会蹲下和打滚。由于大多数小狗都具备上述两项信息（名字和年龄）和</p><p>两种行为（蹲下和打滚），我们的Dog类将包含它们。这个类让Python知道如何创建表示小狗的对</p><p>象。编写这个类后，我们将使用它来创建表示特定小狗的实例。</p><p> <strong>创建 Dog 类</strong></p><p>根据Dog类创建的每个实例都将存储名字和年龄。我们赋予了每条小狗蹲下（sit()）和打滚（roll_over()）的能力：</p><p>dog.py </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    <span class="string">"""一次模拟小狗的简单尝试"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        <span class="string">"""初始化属性name和age"""</span></span><br><span class="line">        </span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""模拟小狗被命令时蹲下"""</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">" is now sitting."</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span>(<span class="params">self</span>):</span></span><br><span class="line">    </span><br><span class="line">        <span class="string">"""模拟小狗被命令时打滚"""</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">" rolled over!"</span>) </span><br></pre></td></tr></tbody></table></figure><p>我们定义了一个名为Dog的类。根据约定，在Python中，<strong>首字母大写的名称指的是类</strong>。</p><h4 id="6-2根据类创建实例"><a href="#6-2根据类创建实例" class="headerlink" title="6.2根据类创建实例"></a>6.2根据类创建实例</h4><p>可将类视为有关如何创建实例的说明。Dog类是一系列说明，让Python知道如何创建表示特</p><p>定小狗的实例。下面来创建一个表示特定小狗的实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">    <span class="string">"""一次模拟小狗的简单尝试"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        <span class="string">"""初始化属性name和age"""</span></span><br><span class="line">        </span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""模拟小狗被命令时蹲下"""</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">" is now sitting."</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span>(<span class="params">self</span>):</span></span><br><span class="line">    </span><br><span class="line">        <span class="string">"""模拟小狗被命令时打滚"""</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">" rolled over!"</span>) </span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">'willie'</span>, <span class="number">6</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"My dog's name is "</span> + my_dog.name + <span class="string">"."</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"My dog is "</span> + <span class="built_in">str</span>(my_dog.age) + <span class="string">" years old."</span>) </span><br></pre></td></tr></tbody></table></figure><p>这里使用的是前一个示例中编写的Dog类。我们让Python创建一条名字为’willie’、年龄为6的小狗。遇到这行代码时，Python使用实参’willie’和6调用Dog类中的方法__init__()。</p><p>方法__init__()创建一个表示特定小狗的示例，并使用我们提供的值来设置属性name和age。</p><p>方法__init__()并未显式地包含return语句，但Python自动返回一个表示这条小狗的实例。我们将这个实例存储在变量my_dog中。</p><p><strong>\1. 访问属性</strong></p><p>要访问实例的属性，可使用句点表示法。我们编写了如下代码来访问my_dog的属性name的值：</p><p><strong>my_dog.name</strong> </p><p>句点表示法在Python中很常用，这种语法演示了Python如何获悉属性的值。在这里，Python</p><p>先找到实例my_dog，再查找与这个实例相关联的属性name。在Dog类中引用这个属性时，使用的</p><p>是self.name。我们使用同样的方法来获取属性age的值:my_dog.age</p><p><strong>\2. 调用方法</strong></p><p><strong>类中的函数称为方法</strong> </p><p>根据Dog类创建实例后，就可以使用句点表示法来调用Dog类中定义的任何方法。下面来让小</p><p>狗蹲下和打滚：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span> </span><br><span class="line">--*snip*--</span><br><span class="line">    </span><br><span class="line">my_dog = Dog(<span class="string">'willie'</span>, <span class="number">6</span>) </span><br><span class="line">my_dog.sit() </span><br><span class="line">my_dog.roll_over() </span><br></pre></td></tr></tbody></table></figure><p>要调用方法，可指定实例的名称（这里是my_dog）和要调用的方法，并用句点分隔它们。遇</p><p>到代码my_dog.sit()时，Python在类Dog中查找方法sit()并运行其代码。Python以同样的方式解读</p><p>代码my_dog.roll_over()。</p><p>这种语法很有用。如果给属性和方法指定了合适的描述性名称，如name、age、sit()和</p><p>roll_over()，即便是从未见过的代码块，我们也能够轻松地推断出它是做什么的。</p><h5 id="6-2-2-方法-init"><a href="#6-2-2-方法-init" class="headerlink" title="6.2.2 方法__init__()"></a><strong>6.2.2 方法__init__()</strong></h5><p>方法__init__()是一个特殊的方法，每当你根据Dog类创建新实例时，Python都会自动运行它。</p><p>在这个方法的名称中，开头和末尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突。</p><p>我们将方法__init__()定义成了包含三个形参：self、name和age。在这个方法的定义中，形参self必不可少，还必须位于其他形参的前面。</p><p>为何必须在方法定义中包含形参self呢？因为Python调用这个__init__()方法来创建Dog实例时，将自动传入实参self。</p><p>每个与类相关联的方法调用都自动传递实参self，它是一 个指向实例本身的引用，让实例能够访问类中的属性和方法。</p><p>我们创建Dog实例时，Python将调用Dog类的方法__init__()。我们将通过实参向Dog()传递名字和年龄；</p><p>self会自动传递，因此我们不需要传递它。每当我们根据Dog类创建实例时，都只需给最</p><p>后两个形参（name和age）提供值。</p><p>定义的两个变量都有前缀self。以self为前缀的变量都可供类中的<strong>所有方法使用</strong>，我们</p><p>还可以通过类的任何实例来访问这些变量。self.name = name获取存储在形参name中的值，并将</p><p>其存储到变量name中，然后该变量被关联到当前创建的实例。self.age = age的作用与此类似。</p><p><strong>像这样可通过实例访问的变量称为属性。</strong></p><p>Dog类还定义了另外两个方法：sit()和roll_over()。由于这些方法不需要额外的信息，如名字或年龄，因此它们只有一个形参self。</p><p>我们后面将创建的实例能够访问这些方法，换句话说，它们都会蹲下和打滚。当前，sit()和roll_over()所做的有限，它们只是打印一条消息，指出小狗正蹲下或打滚。但可以扩展这些方法以模拟实际情况：如果这个类包含在一个计算机游戏中，这些方法将包含创建小狗蹲下和打滚动画效果的代码。</p><p><strong>\3. 创建多个实例</strong></p><p>可按需求根据类创建任意数量的实例。下面再创建一个名为</p><p>your_dog的实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span> </span><br><span class="line">--*snip*--</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">'willie'</span>, <span class="number">6</span>) </span><br><span class="line">your_dog = Dog(<span class="string">'lucy'</span>, <span class="number">3</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"My dog's name is "</span> + my_dog.name + <span class="string">"."</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"My dog is "</span> + <span class="built_in">str</span>(my_dog.age) + <span class="string">" years old."</span>) </span><br><span class="line">my_dog.sit() </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\nYour dog's name is "</span> + your_dog.name + <span class="string">"."</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Your dog is "</span> + <span class="built_in">str</span>(your_dog.age) + <span class="string">" years old."</span>) </span><br><span class="line">your_dog.sit() </span><br></pre></td></tr></tbody></table></figure><p>在这个实例中，我们创建了两条小狗，它们分别名为Willie和Lucy。每条小狗都是一个独立</p><p>的实例，有自己的一组属性，能够执行相同的操作：</p><p>My dog’s name is Willie. </p><p>My dog is 6 years old. </p><p>Willie is now sitting. </p><p>Your dog’s name is Lucy. </p><p>Your dog is 3 years old. </p><p>Lucy is now sitting. </p><p>就算我们给第二条小狗指定同样的名字和年龄，Python依然会根据Dog类创建另一个实例。</p><p>你可按需求根据一个类创建任意数量的实例，条件是将每个实例都存储在不同的变量中，或占用</p><p>列表或字典的不同位置。</p><p><strong>给属性指定默认值</strong></p><p>类中的每个属性都必须有初始值，哪怕这个值是0或空字符串。在有些情况下，如设置默认</p><p>值时，在方法__init__()内指定这种初始值是可行的；如果你对某个属性这样做了，就无需包含</p><p>为它提供初始值的形参。</p><p>下面来添加一个名为odometer_reading的属性，其初始值总是为0。我们还添加了一个名为</p><p>read_odometer()的方法，用于读取汽车的里程表：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">"""初始化描述汽车的属性"""</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span>(<span class="params">self</span>):</span></span><br><span class="line">            -- * snip * --</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""打印一条指出汽车里程的消息"""</span></span><br><span class="line">    </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"This car has "</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line">    </span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.read_odometer() </span><br></pre></td></tr></tbody></table></figure><h4 id="6-3修改属性的值"><a href="#6-3修改属性的值" class="headerlink" title="6.3修改属性的值"></a><strong>6.3修改属性的值</strong></h4><p><em><strong>\1. 直接修改属性的值</strong></em></p><p>要修改属性的值，最简单的方式是通过实例直接访问它。下面的代码直接将里程表读数设置</p><p>为23：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span> </span><br><span class="line"> --*snip*-- </span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>) </span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span> </span><br><span class="line">my_new_car.read_odometer() </span><br></pre></td></tr></tbody></table></figure><p>我们使用句点表示法来直接访问并设置汽车的属性odometer_reading。这行代码让Python在实例my_new_car中找到属性odometer_reading，并将该属性的值设置为23：</p><p>2016 Audi A4 </p><p>This car has 23 miles on it. </p><p>有时候需要像这样直接访问属性，但其他时候需要编写对属性进行更新的方法。</p><p><em><strong>\2. 通过方法修改属性的值</strong></em></p><p>如果有替你更新属性的方法，将大有裨益。这样，你就无需直接访问属性，而可将值传递给</p><p>一个方法，由它在内部进行更新。</p><p>下面的示例演示了一个名为update_odometer()的方法：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">"""初始化描述汽车的属性"""</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span>(<span class="params">self, mileage</span>):</span></span><br><span class="line">        <span class="string">"""将里程表读数设置为指定的值"""</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""打印一条指出汽车里程的消息"""</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"This car has "</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.update_odometer(<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></tbody></table></figure><p>对Car类所做的修改是在添加了方法update_odometer()。这个方法接受一个里程值，并将其存储到self.odometer_reading中。</p><p>后面调用了update_odometer()，并向它提供了实参23（该实参对应于方法定义中的形参mileage）。它将里程表读数设置为23；而方法read_odometer()打印该读数：</p><p>2016 Audi A4 </p><p>This car has 23 miles on it. </p><h4 id="6-4-继承"><a href="#6-4-继承" class="headerlink" title="6.4 继承"></a>6.4 继承</h4><blockquote><p>编写类时，并非总是要从空白开始。如果你要编写的类是另一个现成类的特殊版本，可使用</p><p>继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法；原有的类称为父类，</p><p>而新类称为子类。子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法。</p></blockquote><h5 id="6-4-1子类的方法init"><a href="#6-4-1子类的方法init" class="headerlink" title="6.4.1子类的方法init()"></a>6.4.1子类的方法init()</h5><p>创建子类的实例时，Python首先需要完成的任务是给父类的所有属性赋值。为此，子类的方</p><p>法__init__()需要父类施以援手。</p><p>例如，下面来模拟电动汽车。电动汽车是一种特殊的汽车，因此我们可以在前面创建的Car</p><p>类的基础上创建新类ElectricCar，这样我们就只需为电动汽车特有的属性和行为编写代码。</p><p>下面来创建一个简单的ElectricCar类版本，它具备Car类的所有功能：</p><p>electric_car.py</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"This car has "</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span>(<span class="params">self, mileage</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span>(<span class="params">self, miles</span>):</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="string">"""电动汽车的独特之处"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">"""初始化父类的属性"""</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">        BenzCar.__init__(self,color,engineSN)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model s'</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name()) </span><br></pre></td></tr></tbody></table></figure><p>首先是Car类的代码。创建子类时，父类必须包含在当前文件中，且位于子类前面。</p><p>定义了子类ElectricCar。定义子类时，必须在括号内指定父类的名称。</p><p>方法__init__()接受创建Car实例所需的信息</p><p>super()是一个特殊函数，帮助Python将父类和子类关联起来。这行代码让Python调用ElectricCar的父类的方法__init__()，让ElectricCar实例包含父类的所有属性。</p><p>父类也称为超类（superclass），名称super因此而得名。</p><p>为测试继承是否能够正确地发挥作用，我们尝试创建一辆电动汽车，但提供的信息与创建普</p><p>通汽车时相同。我们创建ElectricCar类的一个实例，并将其存储在变量my_tesla中。这</p><p>行代码调用ElectricCar类中定义的方法__init__()，后者让Python调用父类Car中定义的方法</p><p><strong>init</strong>()。我们提供了实参’tesla’、’model s’和2016。</p><h5 id="6-4-2给子类定义属性和方法"><a href="#6-4-2给子类定义属性和方法" class="headerlink" title="6.4.2给子类定义属性和方法"></a><strong>6.4.2给子类定义属性和方法</strong></h5><p>让一个类继承另一个类后，可添加区分子类和父类所需的新属性和方法。</p><p>下面来添加一个电动汽车<strong>特有</strong>的属性（电瓶），以及一个描述该属性的方法。我们将存储电</p><p>瓶容量，并编写一个打印电瓶描述的方法：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    -- * snip * --</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="string">"""Represent aspects of a car, specific to electric vehicles."""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        电动汽车的独特之处</span></span><br><span class="line"><span class="string">        初始化父类的属性，再初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""打印一条描述电瓶容量的消息"""</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"This car has a "</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">"-kWh battery."</span>)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model s'</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br></pre></td></tr></tbody></table></figure><p>我们添加了新属性self.battery_size，并设置其初始值（如70）。根据ElectricCar 类</p><p>创建的所有实例都将包含这个属性，但所有Car实例都不包含它。在处，我们还添加了一个名</p><p>为describe_battery()的方法，它打印有关电瓶的信息。我们调用这个方法时，将看到一条电动</p><p>汽车特有的描述：</p><p>2016 Tesla Model S </p><p>This car has a 70-kWh battery. </p><p>对于ElectricCar类的特殊化程度没有任何限制。模拟电动汽车时，你可以根据所需的准确</p><p>程度添加任意数量的属性和方法。如果一个属性或方法是任何汽车都有的，而不是电动汽车特有</p><p>的，就应将其加入到Car类而不是ElectricCar类中。这样，使用Car类的人将获得相应的功能，而</p><p>ElectricCar类只包含处理电动汽车特有属性和行为的代码。</p><h5 id="6-4-3重写父类的方法"><a href="#6-4-3重写父类的方法" class="headerlink" title="6.4.3重写父类的方法"></a><strong>6.4.3重写父类的方法</strong></h5><p>对于父类的方法，只要它不符合子类模拟的实物的行为，都可对其进行重写。为此，可在子</p><p>类中定义一个这样的方法，即它与<strong>要重写的父类方法同名</strong>。这样，Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。</p><p>假设Car类有一个名为fill_gas_tank()的方法，它对全电动汽车来说毫无意义，因此你可能</p><p>想重写它。下面演示了一种重写方式：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span> </span><br><span class="line">    --*snip*-- </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill_gas_tank</span>(<span class="params">self</span>):</span> </span><br><span class="line">    <span class="string">"""电动汽车没有油箱"""</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This car doesn't need a gas tank!"</span>) </span><br></pre></td></tr></tbody></table></figure><p>现在，如果有人对电动汽车调用方法fill_gas_tank()，Python将忽略Car类中的方法</p><p>fill_gas_tank()，转而运行上述代码。使用继承时，可让子类保留从父类那里继承而来的精华，</p><p>并剔除不需要的糟粕。</p><h4 id="6-5-导入类"><a href="#6-5-导入类" class="headerlink" title="6.5 导入类"></a><strong>6.5 导入类</strong></h4><p>随着你不断地给类添加功能，文件可能变得很长，即便你妥善地使用了继承亦如此。为遵循</p><p>Python的总体理念，应让文件尽可能整洁。为在这方面提供帮助，Python允许你将类存储在模块</p><p>中，然后在主程序中导入所需的模块。</p><p>下面来创建一个只包含Car类的模块，将Car类存储在一个名为car.py的模块中。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""一个可用于表示汽车的类"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="string">"""初始化描述汽车的属性"""</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""返回整洁的描述性名称"""</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">"""打印一条消息，指出汽车的里程"""</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This car has "</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span>(<span class="params">self, mileage</span>):</span></span><br><span class="line">    <span class="string">""" </span></span><br><span class="line"><span class="string">    将里程表读数设置为指定的值</span></span><br><span class="line"><span class="string">    拒绝将里程表往回拨</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span>(<span class="params">self, miles</span>):</span></span><br><span class="line">        <span class="string">"""将里程表读数增加指定的量"""</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>我们包含了一个模块级文档字符串，对该模块的内容做了简要的描述。你应为自己</p><p>创建的每个模块都编写文档字符串。</p><p>下面来创建另一个文件——my_car.py，在其中导入Car类并创建其实例：</p><p>my_car.py </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>, <span class="string">'a4'</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></tbody></table></figure><p>import语句让Python打开模块car，并导入其中的Car类。这样我们就可以使用Car类了。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>编写函数：<strong>传入半径，计算圆的面积。</strong></p><p>例如：</p><p>function_name(7)</p><p>输出：面积为153.86</p><p><em><strong>参考答案</strong></em></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circleArea</span>(<span class="params">a</span>):</span></span><br><span class="line">    area = a * a * math.pi</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"面积为%.2f"</span> % area)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">circleArea(<span class="number">7</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>编写函数：<strong>传入参数a和b（a&lt;b），计算a+(a+1)+(a+2)+……+b的值。</strong></p><p>例如：</p><p>function_name(1, 100)</p><p>输出：5050</p><p><em><strong>参考答案</strong></em></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumCount</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    s=<span class="built_in">sum</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(a,b+<span class="number">1</span>)))</span><br><span class="line">    <span class="comment">#s=sum(range(a,b+1))</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1=sumCount(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></tbody></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p><strong>二选一</strong></p><p><strong>(1)请写一个函数 equals ，该函数参数为任意数量的数字，请在函数中统计出这些参数数字中重复的数字有多少个</strong></p><p>比如 ：</p><p>equals(3, 4, 3, 4, 1, 6, 2)<br>输出为：</p><p>数字 3 出现了 2 次<br>数字 4 出现了 2 次<br>数字 1 出现了 1 次<br>数字 6 出现了 1 次<br>数字 2 出现了 1 次</p><p><em><strong>参考答案</strong></em></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">equals</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">print</span>(i, <span class="string">'出现的次数为:'</span>, numbers.count(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">equals(<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>(2)编写程序，生成包含1000个0到100之间的随机整数，并统计每个元素的出现次数。</strong></p><p><em><strong>参考答案</strong></em></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">ls = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">d = <span class="built_in">dict</span>()</span><br><span class="line"><span class="comment">#d = {}</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> ls:</span><br><span class="line">    d[element] = d.get(element, <span class="number">0</span>)+<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"数字{}出现了{}次"</span>.<span class="built_in">format</span>(k, v))</span><br></pre></td></tr></tbody></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><p>编写以下类，并创建Student和CollegeStudent对象进行测试，让子类调用自身和父类的方法。</p><ul><li><p>编写person类，具有以下属性和方法：<br>属性：姓名name，年龄age<br>方法：speak(),打印出当前person对象的姓名和年龄</p></li><li><p>编写Student类继承person类，具有以下属性和方法：<br>属性：姓名name，年龄age，学校school和学号my_id<br>方法：speak(),打印当前Student对象的所有属性信息<br>方法：run(v,times),设置学生速度和时间，输出学生跑步距离</p></li><li><p>编写CollegeStudent类继承Student类，具有以下属性和方法：<br>属性：姓名name，年龄age，学校school，学号my_id和语言language<br>方法：speak(),打印出当前CollegeStudent对象的所有属性信息<br>方法：coding(),使用十秒打印出”I am coding……….”(十个点)<br>参考代码：<br>from time import sleep</p></li></ul><p>class Person():<br>    def <strong>init</strong>(self, name, age):<br>        self.name = name<br>        self.age = age</p><pre><code>def speak(self):    print("我是%s,今年%s岁了。" % (self.name, self.age))</code></pre><p>class Student(Person):<br>    def <strong>init</strong>(self, name, age, school, id):<br>        super().<strong>init</strong>(name, age)<br>        self.school = school<br>        self.id = id</p><pre><code>def speak(self):    print("我是%s,今年%s岁了,我来自%s,学号是%d" % (self.name, self.age, self.school, self.id))@staticmethoddef run(v, times):    return v * times</code></pre><p>class CollegeStudent(Student):<br>    def <strong>init</strong>(self, name, age, school, id, language):<br>        super().<strong>init</strong>(name, age, school, id)<br>        self.language = language</p><pre><code>def speak(self):    print("我是%s,今年%s岁了,我来自%s,学号是%d,我会%s" % (self.name, self.age, self.school, self.id, self.language))def coding(self):    print("I am coding", end=" ")    for i in range(10):        print(".", end="")        sleep(1)</code></pre><p>x = CollegeStudent(‘Jim’, 18, ‘BlueKing’, 200101, ‘English’)<br>x.speak()<br>x.coding()</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python01</title>
      <link href="/2022/02/07/python%E7%AC%AC%E4%B8%80%E8%AF%BE/"/>
      <url>/2022/02/07/python%E7%AC%AC%E4%B8%80%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><p>python是一种跨平台的、解释型、交互式、面向对象的编程语言。</p><h2 id="1-安装和运行"><a href="#1-安装和运行" class="headerlink" title="1.安装和运行"></a>1.安装和运行</h2><h3 id="1-1安装"><a href="#1-1安装" class="headerlink" title="1.1安装"></a>1.1安装</h3><p>官方网站</p><h3 id="1-2运行"><a href="#1-2运行" class="headerlink" title="1.2运行"></a>1.2运行</h3><h5 id="交互式运行"><a href="#交互式运行" class="headerlink" title="交互式运行"></a>交互式运行</h5><h5 id="python自带的简单的开发环境IDLE运行"><a href="#python自带的简单的开发环境IDLE运行" class="headerlink" title="python自带的简单的开发环境IDLE运行"></a>python自带的简单的开发环境IDLE运行</h5><h2 id="2-变量和数据类型"><a href="#2-变量和数据类型" class="headerlink" title="2 .变量和数据类型"></a>2 .变量和数据类型</h2><h3 id="2-1输出函数print"><a href="#2-1输出函数print" class="headerlink" title="2.1输出函数print"></a>2.1输出函数print</h3><p>print()函数的输出内容可以是数字、字符串、含有运算符的表达式</p><p>print()函数可以将内容输出到 显示器 或 文件。</p><p>输出到文件例：</p><p>fp = open(‘D:/test.txt’,’a+’)</p><p>print(‘helloword!’, file=fp)</p><p>fp.close()</p><p>print()函数的输出可换行。</p><h3 id="2-2转义字符"><a href="#2-2转义字符" class="headerlink" title="2.2转义字符"></a>2.2转义字符</h3><p>在需要在字符中使用特殊字符时，python 用反斜杠 *<em>\*</em> 转义字符。</p><p>反斜杠+想要实现的转义功能的首字母</p><p>换行：\n        print(‘hello\nworld’)</p><p>水平制表符：\t      print(‘hello\tworld’)</p><p>退格: \b        print(‘hello\bworld’)</p><p>print(‘http:\\\\baidu.com’)</p><p>print(‘老师说：\‘同学们好\'‘)</p><h3 id="2-3变量"><a href="#2-3变量" class="headerlink" title="2.3变量"></a>2.3变量</h3><p>变量由三部分组成：标识–可用id(obj)获取、类型–可用type(obj)获取和值–可用print()获取。</p><p>例：name = “张三”</p><p>变量之所以称为变量，顾名思义，其量可以改变。</p><p>当多次赋值之后，变量名会指向新的空间。</p><p>例：</p><p>name=’李四’</p><p>name=’张三’</p><p>最终只会输出张三</p><h4 id="变量的命名和使用"><a href="#变量的命名和使用" class="headerlink" title="变量的命名和使用"></a>变量的命名和使用</h4><ul><li>变量名只能包含<strong>字母、数字和下划线</strong>。变量名可以<strong>字母或下划线打头</strong>，但<strong>不能以数字开</strong></li></ul><p><strong>头</strong>，例如，可将变量命名为message_1，但不能将其命名为1_message。 </p><ul><li>变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名greeting_message</li></ul><p>可行，但变量名greeting message会引发错误。</p><ul><li>不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，</li></ul><p>如print()</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import keyword</span><br><span class="line">&gt;&gt;&gt; print(keyword.kwlist)</span><br><span class="line">['False', 'None', 'True', '__peg_parser__', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</span><br></pre></td></tr></tbody></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h4><p>在Python中，<strong>单行注释</strong>用井号（#）标识。井号后面的内容都会被Python解释器忽略</p><p><strong>多行注释</strong>使用三引号：’ ‘ ‘chgchlf’ ‘ ‘或者“ ” “dchkdryvec” “ “</p><p>编写注释的主要目的是阐述代码要做什么，以及是如何做的。在开发项目期间，你对各个部</p><p>分如何协同工作了如指掌，但过段时间后，有些细节你可能不记得了。通过编写注释，以清</p><p>晰的自然语言对解决方案进行概述，可节省很多时间。</p><p>在程序中添加描述性注释,编写清晰、简洁的注释。</p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062047670.png?raw=true" alt="image-20220116215801486"></p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062048069.png?raw=true" alt="image-20220116111641462"></p><h3 id="2-4数据类型"><a href="#2-4数据类型" class="headerlink" title="2.4数据类型"></a>2.4数据类型</h3><h4 id="布尔型-bool"><a href="#布尔型-bool" class="headerlink" title="布尔型(bool)"></a>布尔型(bool)</h4><p>获取对象的布尔值可用内置函数bool ()</p><p><strong>True，False</strong></p><p>布尔类型可转化为整数：</p><p>True  –  1</p><p>False  –  0</p><p>以下对象的布尔值为 False：</p><p>False、数值0、None、空字符串、空列表、空元组、空字典、空集合</p><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p><strong>整数</strong>（int）</p><p>可表示正数、负数、0.</p><p>在Python中，可对整数执行加（+）减（-）乘（*）除（/）运算。</p><p>Python使用两个乘号表示乘方运算，添加括号优先运算</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> + <span class="number">3</span></span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> - <span class="number">2</span></span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> * <span class="number">3</span></span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> / <span class="number">2</span></span><br><span class="line"><span class="number">1.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="number">9</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> + <span class="number">3</span>*<span class="number">4</span></span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">2</span> + <span class="number">3</span>) * <span class="number">4</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></tbody></table></figure><p><strong>浮点数</strong>（float）</p><p>Python将带小数点的数字都称为浮点数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span> + <span class="number">0.1</span></span><br><span class="line"><span class="number">0.2</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.2</span> + <span class="number">0.2</span></span><br><span class="line"><span class="number">0.4</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> * <span class="number">0.1</span></span><br><span class="line"><span class="number">0.2</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> * <span class="number">0.2</span></span><br><span class="line"><span class="number">0.4</span> </span><br><span class="line"><span class="comment">#但需要注意的是，结果包含的小数位数可能是不确定的：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.2</span> + <span class="number">0.1</span></span><br><span class="line"><span class="number">0.30000000000000004</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> * <span class="number">0.1</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1.1</span>+<span class="number">2.2</span>)<span class="comment">#3.3000000000000003</span></span><br><span class="line"><span class="comment">#解决方案--导入模块decimal</span></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="built_in">print</span>(Decimal(<span class="string">'1.1'</span>)+Decimal(<span class="string">'2.2'</span>))<span class="comment">#3.3</span></span><br><span class="line"><span class="comment">#二进制的底层问题，不必深究</span></span><br></pre></td></tr></tbody></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h4 id="str–-gt-”人生苦短，我学python”"><a href="#str–-gt-”人生苦短，我学python”" class="headerlink" title="str–>”人生苦短，我学python”"></a>str–&gt;”人生苦短，我学python”</h4><p>字符串就是一系列字符。在Python中，用<strong>引号</strong>括起的都是字符串，其中的引号可以是单引号，也可以是双引号</p><p><strong>正确地使用单引号和双引号</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">"One of Python's strengths is its diverse community."</span> </span><br><span class="line"><span class="built_in">print</span>(message) </span><br></pre></td></tr></tbody></table></figure><p>撇号位于两个双引号之间，因此Python解释器能够正确地理解这个字符串：</p><p>&gt;&gt;&gt;One of Python’s strengths is its diverse community. </p><p>然而，如果你使用单引号，Python将无法正确地确定字符串的结束位置：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">'One of Python'</span>s strengths <span class="keyword">is</span> its diverse community.<span class="string">' </span></span><br><span class="line"><span class="string">print(message) </span></span><br></pre></td></tr></tbody></table></figure><p>python中<strong>三引号</strong>可以表示复杂的字符串:</p><ul><li><p>python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p></li><li><p>三引号的语法是一对连续的单引号或者双引号。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chat = <span class="string">"""how are you?</span></span><br><span class="line"><span class="string">i'm fine, than you,and you?</span></span><br><span class="line"><span class="string">    me too!"""</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(chat)</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>字符串常用方法</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#title()以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。</span></span><br><span class="line">name = <span class="string">"ada lovelace"</span> </span><br><span class="line"><span class="built_in">print</span>(name.title()) <span class="comment">#Ada Lovelace</span></span><br><span class="line"></span><br><span class="line">name2 = <span class="string">"Ada Lovelace"</span> </span><br><span class="line"><span class="built_in">print</span>(name2.upper()) <span class="comment">#ADA LOVELACE </span></span><br><span class="line"><span class="built_in">print</span>(name2.lower()) <span class="comment">#ada lovelace </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name*<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>合并（拼接）字符串</strong></p><p>Python使用加号（+）来合并字符串。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">"ada"</span> </span><br><span class="line">last_name = <span class="string">"lovelace"</span> </span><br><span class="line">full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, "</span> + full_name.title() + <span class="string">"!"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>函数str()</strong></p><p>在字符串中使用整数时，需要显式地指出你希望Python将这个整数用作字符串。为此，可调用函数str()，它让Python将非字符串值表示为字符串：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = 23 </span><br><span class="line">message = "Happy " + str(age) + "rd Birthday!" </span><br><span class="line">print(message) </span><br></pre></td></tr></tbody></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062101132.png?raw=true" alt="image-20220116113544841"></p><p>注意：文字类和小数类无法转换为整数</p><h4 id="input（-函数"><a href="#input（-函数" class="headerlink" title="input（)函数"></a>input（)函数</h4><p>input()函数接收来自用户的输入，输入值的类型为str，使用=对输入的值进行存储</p><h3 id="2-5运算符及其优先级"><a href="#2-5运算符及其优先级" class="headerlink" title="2.5运算符及其优先级"></a>2.5运算符及其优先级</h3><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062101753.png?raw=true" alt="image-20220116211704900"></p><h5 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h5><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102679.png?raw=true" alt="image-20220116211957480"></p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102335.png?raw=true" alt="image-20220116212517749"></p><h5 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h5><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102107.png?raw=true" alt="image-20220116212608901"></p><p><strong>交换：</strong> a,b = b,a</p><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102636.png?raw=true" alt="image-20220116212937655"></p><p><strong>结果返回布尔值</strong></p><p>注意：”=“ 为赋值运算符，”==“ 为比较运算符</p><p>== 比较的是值</p><p> 比较对象的标识用  is</p><p>打印标识用id()</p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102729.png?raw=true" alt="image-20220116215111903"></p><h5 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h5><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102382.png?raw=true" alt="image-20220116214923804"></p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102398.png?raw=true" alt="image-20220116214951701"></p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102879.png?raw=true" alt="image-20220116220413858"></p><h5 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h5><p>位与 &amp;       位或 |</p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102848.png?raw=true" alt="image-20220116220936751"></p><h5 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h5><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102652.png?raw=true" alt="image-20220116221619758"></p><p>0 –&gt; 算术运算符  –&gt; 位运算符  –&gt; 比较运算符  –&gt; 布尔运算符  –&gt; 赋值运算符</p><h2 id="3-流程控制"><a href="#3-流程控制" class="headerlink" title="3.流程控制"></a>3.流程控制</h2><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062103865.png?raw=true" alt="image-20220116222445811"></p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102273.png?raw=true" alt="202202062102273.png"></p><h3 id="3-1顺序结构"><a href="#3-1顺序结构" class="headerlink" title="3.1顺序结构"></a>3.1顺序结构</h3><p>程序从上到下顺序地执行代码，中间没有任何的判断和跳转，直到程序结束。</p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102401.png?raw=true" alt="image-20220116222702162"></p><h3 id="3-2选择结构"><a href="#3-2选择结构" class="headerlink" title="3.2选择结构"></a>3.2选择结构</h3><p>程序根据<strong>判断条件的布尔值</strong>选择性地执行部分代码。</p><p>明确地让计算机知道在什么条件下，该做什么。</p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102163.png?raw=true" alt="image-20220116223242324"></p><p><strong>条件测试</strong></p><p>每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。Python</p><p>根据条件测试的值为True还是False来决定是否执行if语句中的代码。如果条件测试的值为True，</p><p>Python就执行紧跟在if语句后面的代码；如果为False，Python就忽略这些代码。</p><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><p>单分支结构—-最简单的if语句只有一个测试和一个操作：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> conditional_test: </span><br><span class="line">    do something </span><br><span class="line"><span class="comment">#如果。。。就。。。</span></span><br></pre></td></tr></tbody></table></figure><p>在第1行中，可包含任何条件测试，而在紧跟在测试后面的缩进代码块中，可执行任何操作。</p><p>如果条件测试的结果为True，Python就会执行紧跟在if语句后面的代码；否则Python将忽略这些</p><p>代码。</p><p>假设有一个表示某人年龄的变量，而你想知道这个人是否够投票的年龄，可使用如下代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span> </span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"You are old enough to vote!"</span>) </span><br></pre></td></tr></tbody></table></figure><p><strong>if-else 语句</strong>（双分支结构）</p><p>经常需要在条件测试通过了时执行一个操作，并在没有通过时执行另一个操作；在这种情况</p><p>下，可使用Python提供的if-else语句。if-else语句块类似于简单的if语句，但其中的else语句</p><p>让你能够指定条件测试未通过时要执行的操作。</p><p>下面的代码在一个人够投票的年龄时显示与前面相同的消息，同时在这个人不够投票的年龄</p><p>时也显示一条消息：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">17</span> </span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"You are old enough to vote!"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Have you registered to vote yet?"</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Sorry, you are too young to vote."</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Please register to vote as soon as you turn 18!"</span>) </span><br><span class="line"> <span class="comment">#如果。。就。。否则。。。</span></span><br></pre></td></tr></tbody></table></figure><p>上述代码之所以可行，是因为只存在两种情形：要么够投票的年龄，要么不够。if-else结</p><p>构非常适合用于要让Python执行两种操作之一的情形。在这种简单的if-else结构中，总是会执行</p><p>两个操作中的一个。</p><p><strong>if-elif-else 结构</strong>（多分支结构）</p><p>经常需要检查超过两个的情形，为此可使用Python提供的if-elif-else结构。Python只执行</p><p>if-elif-else结构中的一个代码块，它依次检查每个条件测试，直到遇到通过了的条件测试。测</p><p>试通过后，Python将执行紧跟在它后面的代码，并跳过余下的测试。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a&gt;b:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">elif</span> b&gt;c:</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></tbody></table></figure><p><strong>使用多个 elif 代码块</strong></p><p>可根据需要使用<strong>任意数量</strong>的elif代码块</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a&gt;b:</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">elif</span> b&gt;c:</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line"><span class="keyword">elif</span> d&gt;c:</span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></tbody></table></figure><p><strong>省略 else 代码块</strong></p><p><strong>Python并不要求if-elif结构后面必须有else代码块。</strong></p><p>忽略else时，每个代码块都仅在通过了相应的测试时才会执行。</p><p>else是一条包罗万象的语句，只要不满足任何if或elif中的条件测试，其中的代码就会执行，</p><p><strong>这可能会引入无效甚至恶意的数据。</strong>如果知道最终要测试的条件，应考虑使用一个elif代码块来</p><p>代替else代码块。这样，你就可以肯定，仅当满足相应的条件时，你的代码才会执行。</p><h4 id="嵌套if"><a href="#嵌套if" class="headerlink" title="嵌套if"></a>嵌套if</h4><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102502.png?raw=true" alt="image-20220117111136471"></p><p>例：在某商城购物，若是会员，购物&gt;=200打八折，购物&gt;=100打九折，购物&lt;100不打折</p><p>非会员购物&gt;=200打九折，否则不打折。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">answer = input('您是会员吗？y/n')</span><br><span class="line">money = float(input('请输入您的购物金额：'))</span><br><span class="line">if answer=='y': #会员</span><br><span class="line">    if money &gt;= 200:</span><br><span class="line">        print('打八折，消费金额为：',0.8*money)</span><br><span class="line">    elif money &gt;= 100:</span><br><span class="line">        print('打九折，消费金额为：', 0.9 * money)</span><br><span class="line">    else:</span><br><span class="line">        print('不打折，消费金额为：', money)</span><br><span class="line">else: #非会员</span><br><span class="line">if money &gt;= 200:</span><br><span class="line">print('打九五折，消费金额为：', 0.95 * money)</span><br><span class="line">else:</span><br><span class="line">    print('不打折，消费金额为：', money)</span><br></pre></td></tr></tbody></table></figure><h4 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h4><p>语句什么都不做，只是一个占位符。当没想好某一块代码怎么写时，写个pass先占个位</p><ul><li>if语句的条件执行体</li><li>for-in语句的循环体</li><li>定义函数时的函数体</li></ul><h3 id="3-3循环结构"><a href="#3-3循环结构" class="headerlink" title="3.3循环结构"></a>3.3循环结构</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><strong>for</strong>循环</h4><p>需要对列表中的<strong>每个元素都执行相同的操作时</strong>（遍历），可使用Python中的for循环。</p><ul><li><p>语法结构</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for  自定义的变量  in 可迭代对象：</span><br><span class="line">循环体</span><br></pre></td></tr></tbody></table></figure></li></ul><p>我们可以分别获取名单中的每个名字，但这种做法会导致多个问题。例如，如果名单很长，将包含大量重复的代码。另外，每当名单的长度发生变化时，都必须修改代码。通过使用for循环，可让Python</p><p>去处理这些问题。</p><p>下面使用for循环来打印名单中的所有名字：</p><p>magicians.py </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>] </span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians: </span><br><span class="line">    <span class="built_in">print</span>(magician) </span><br></pre></td></tr></tbody></table></figure><p>对列表中的每个元素，都将执行循环指定的步骤，而不管列表包含多少个元素。</p><p>用for in循环打印1-100的偶数和</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sum = 0 #用于存储偶数和</span><br><span class="line">for item in range(1,101):</span><br><span class="line">    if item %2 == 0:</span><br><span class="line">    #print(item)</span><br><span class="line">        sum+=item</span><br><span class="line">        </span><br><span class="line">print('1-100之间的偶数为：', sum)</span><br></pre></td></tr></tbody></table></figure><h4 id="内置函数-range"><a href="#内置函数-range" class="headerlink" title="内置函数 range()"></a><strong>内置函数 range()</strong></h4><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102023.png?raw=true" alt="image-20220117113153605"></p><p>Python函数range()让你能够轻松地生成一系列的数字。例如，可以像下面这样使用函数</p><p>range()来打印一系列的数字：</p><p>numbers.py </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>): </span><br><span class="line">    <span class="built_in">print</span>(value) </span><br></pre></td></tr></tbody></table></figure><p>上述代码好像应该打印数字1~5，但实际上它不会打印数字5：</p><p>1 </p><p>2 </p><p>3 </p><p>4 </p><p>在这个示例中，range()只是打印数字1~4，这是你在编程语言中经常看到的差一行为的结果。</p><p>函数range()让Python从你指定的第一个值开始数，并在到达你指定的第二个值后停止，因此输出</p><p>不包含第二个值（这里为5）。—-左闭右开</p><p>要打印数字1~5，需要使用range(1,6)：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>): </span><br><span class="line"><span class="built_in">print</span>(value) </span><br></pre></td></tr></tbody></table></figure><p>使用函数range()时，还可<strong>指定步长</strong>。例如，下面的代码打印1~10内的偶数：</p><p>even_numbers.py </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>): </span><br><span class="line"><span class="built_in">print</span>(value) </span><br></pre></td></tr></tbody></table></figure><p><strong>使用 range()创建数字列表</strong></p><p>要创建数字列表，可使用函数**list()**将range()的结果直接转换为列表。如果将range()作为</p><p>list()的参数，输出将为一个数字列表。</p><p>在前一节的示例中，我们打印了一系列数字。要将这些数字转换为一个列表，可使用list()：</p><p>numbers = list(range(1,6)) </p><p>print(numbers) </p><p>结果如下：</p><p>[1, 2, 3, 4, 5] </p><p><img src="https://github.com/LeatingVan/Image/blob/main/cover/202202062102935.png?raw=true" alt="image-20220117113322639"></p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a><strong>while</strong>循环</h4><p>语法结构：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件表达式：</span><br><span class="line">条件执行体</span><br></pre></td></tr></tbody></table></figure><p>for循环用于针对集合中的每个元素都一个代码块，而while循环不断地运行，直到指定的条件不满足为止。</p><p>你可以使用while循环来数数，例如，下面的while循环从1数到5：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span> </span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">5</span>: </span><br><span class="line">    <span class="built_in">print</span>(a) </span><br><span class="line">    a += <span class="number">1</span> </span><br></pre></td></tr></tbody></table></figure><p>1 </p><p>2 </p><p>3 </p><p>4 </p><p>5 </p><h4 id="使用-break-退出循环"><a href="#使用-break-退出循环" class="headerlink" title="使用 break 退出循环"></a><strong>使用 break 退出循环</strong></h4><p>要立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break语句。</p><p>例如，来看一个让用户指出他到过哪些地方的程序。在这个程序中，我们可以在用户输入</p><p>‘quit’后使用break语句立即退出while循环：</p><p>cities.py </p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nPlease enter the name of a city you have visited:"</span> </span><br><span class="line">prompt += <span class="string">"\n(Enter 'quit' when you are finished.) "</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">city = <span class="built_in">input</span>(prompt) </span><br><span class="line"><span class="keyword">if</span> city == <span class="string">'quit'</span>: </span><br><span class="line"><span class="keyword">break</span> </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"I'd love to go to "</span> + city.title() + <span class="string">"!"</span>) </span><br></pre></td></tr></tbody></table></figure><p>以while True打头的循环将不断运行，直到遇到break语句。这个程序中的循环不断</p><p>输入用户到过的城市的名字，<strong>直到他输入’quit’为止。</strong>用户输入’quit’后，将执行break语句，导</p><p>致Python退出循环。</p><h4 id="在循环中使用-continue"><a href="#在循环中使用-continue" class="headerlink" title="在循环中使用 continue"></a><strong>在循环中使用 continue</strong></h4><p>作用：用于结束当前的循环，进入下一次循环，通常与分支结构中的if一起使用。</p><p>要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它</p><p>不像break语句那样不再执行余下的代码并退出整个循环。例如，来看一个从1数到10，但只打印</p><p>其中奇数的循环：</p><p>counting.py </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">current_number = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> current_number &lt; <span class="number">10</span>: </span><br><span class="line">current_number += <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span> current_number % <span class="number">2</span> == <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">continue</span> </span><br><span class="line"><span class="built_in">print</span>(current_number) </span><br></pre></td></tr></tbody></table></figure><p>我们首先将current_number设置成了0，由于它小于10，Python进入while循环。进入循环后，</p><p>我们以步长1的方式往上数，因此current_number为1。接下来，if语句检查current_number</p><p>与2的求模运算结果。如果结果为0（意味着current_number可被2整除），就执行continue语句，</p><p>让Python忽略余下的代码，并返回到循环的开头。如果当前的数字不能被2整除，就执行循环中</p><p>余下的代码，Python将这个数字打印出来：</p><p>1 </p><p>3 </p><p>5 </p><p>7 </p><p>9 </p><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><p>循环结构中又嵌套了另外的完整的循环结构，其中内层循环作为外层循环的执行体。</p><p><em><strong>输出一个三行四列的矩形：</strong></em></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1,4):</span><br><span class="line">    for j in range(1,5):</span><br><span class="line">        print("*",end='\t') #不换行输出</span><br><span class="line">    print()</span><br></pre></td></tr></tbody></table></figure><p>#看调试过程，明白嵌套循环的过程</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>某市的水费缴费采用阶梯收费方式<br>其用水量x(吨)对应的水费y(元)函数关系如下</p><pre><code>        |---   0   ,x&lt;0          |        |y=f(x)= |    4x+1        |---—————— , 0&lt;=x&lt;=15         |      3                |        |---2.5x-10.5 , x&gt;15</code></pre><p>若小明家本月用水13.8吨,用一条输出语句输出小明家的水费</p><p>答案略</p><h4 id="2-for-in练习题-—-100-999的水仙花数"><a href="#2-for-in练习题-—-100-999的水仙花数" class="headerlink" title="2 for in练习题 —-100~999的水仙花数"></a>2 for in练习题 —-100~999的水仙花数</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">153 = 3*3*3 + 5*5*5 + 1*1*1</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for item in range(100,1000):</span><br><span class="line">    ge=item%10</span><br><span class="line">    shi=item//10%10</span><br><span class="line">    bai=item//100</span><br><span class="line">    if ge**3 + shi**3 +bai**3 == item:</span><br><span class="line">        print(item)</span><br></pre></td></tr></tbody></table></figure><p>答案：</p><p>153<br>370<br>371<br>407</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>循环语句，打印出如下图形：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">* ################## *</span><br><span class="line">** ################ **</span><br><span class="line">*** ############## ***</span><br><span class="line">**** ############ ****</span><br><span class="line">***** ########## *****</span><br><span class="line">****** ######## ******</span><br><span class="line">******* ###### *******</span><br><span class="line">******** #### ********</span><br><span class="line">********* ## *********</span><br><span class="line">********* ## *********</span><br><span class="line">******** #### ********</span><br><span class="line">******* ###### *******</span><br><span class="line">****** ######## ******</span><br><span class="line">***** ########## *****</span><br><span class="line">**** ############ ****</span><br><span class="line">*** ############## ***</span><br><span class="line">** ################ **</span><br><span class="line">* ################## *</span><br></pre></td></tr></tbody></table></figure><p>参考：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    s = <span class="string">"*"</span>*i + <span class="string">" "</span> + <span class="string">"#"</span>*<span class="number">2</span>*(<span class="number">10</span>-i) + <span class="string">" "</span> + <span class="string">"*"</span>*i</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    s = <span class="string">"*"</span>*(<span class="number">10</span>-i) + <span class="string">" "</span> + <span class="string">"#"</span>*<span class="number">2</span>*i + <span class="string">" "</span> + <span class="string">"*"</span>*(<span class="number">10</span>-i)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"*"</span>*i,<span class="string">"#"</span>*(<span class="number">10</span>-i)*<span class="number">2</span>,<span class="string">"*"</span>*i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"*"</span>*i,<span class="string">"#"</span>*(<span class="number">10</span>-i)*<span class="number">2</span>,<span class="string">"*"</span>*i)</span><br></pre></td></tr></tbody></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>while练习题：求1-100的偶数和：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#1、初始化变量</span><br><span class="line">a = 1</span><br><span class="line">sum = 0</span><br><span class="line">#2、条件判断</span><br><span class="line">while a&lt;=100:</span><br><span class="line">    if a%2 == 0: #3、条件执行体</span><br><span class="line">        sum += a</span><br><span class="line">    a+=1 #4、改变变量</span><br><span class="line">print('1-100之间的偶数为：', sum)</span><br></pre></td></tr></tbody></table></figure><p>答案：2550</p><p>思考：求1-100的奇数和？</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><strong>让用户选择何时退出</strong></p><p>可使用while循环让程序，在用户愿意时退出，现在有一个程序，会返回用户输入的语句</p><p>定义一个退出值“quit”，只要用户输入的不是这个值，程序就接着运行(打印用户输入的话)，请补充剩下的代码片段</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span> </span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span> </span><br><span class="line">message = <span class="string">""</span> </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>参考：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span> </span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program. "</span> </span><br><span class="line">message = <span class="string">""</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">message = <span class="built_in">input</span>(prompt) </span><br><span class="line"><span class="keyword">if</span> message == <span class="string">'quit'</span>: </span><br><span class="line"><span class="keyword">break</span> </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(message) </span><br></pre></td></tr></tbody></table></figure><h4 id="6-利用嵌套循环打印九九乘法表"><a href="#6-利用嵌套循环打印九九乘法表" class="headerlink" title="6 利用嵌套循环打印九九乘法表"></a>6 利用嵌套循环打印九九乘法表</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1,10):</span><br><span class="line">    for j in range(1,i+1):</span><br><span class="line">        print(i,'*',j,'=',i*j,end='\t')</span><br><span class="line">    print()</span><br></pre></td></tr></tbody></table></figure><p>1 * 1 = 1<br>2 * 1 = 2    2 * 2 = 4<br>3 * 1 = 3    3 * 2 = 6    3 * 3 = 9<br>4 * 1 = 4    4 * 2 = 8    4 * 3 = 12    4 * 4 = 16<br>5 * 1 = 5    5 * 2 = 10    5 * 3 = 15    5 * 4 = 20    5 * 5 = 25<br>6 * 1 = 6    6 * 2 = 12    6 * 3 = 18    6 * 4 = 24    6 * 5 = 30    6 * 6 = 36<br>7 * 1 = 7    7 * 2 = 14    7 * 3 = 21    7 * 4 = 28    7 * 5 = 35    7 * 6 = 42    7 * 7 = 49<br>8 * 1 = 8    8 * 2 = 16    8 * 3 = 24    8 * 4 = 32    8 * 5 = 40    8 * 6 = 48    8 * 7 = 56    8 * 8 = 64<br>9 * 1 = 9    9 * 2 = 18    9 * 3 = 27    9 * 4 = 36    9 * 5 = 45    9 * 6 = 54    9 * 7 = 63    9 * 8 = 72    9 * 9 = 81    </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2022/02/07/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/02/07/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在想要设置为标题的文字前面加 #来表示<br>一个 #是一级标题，二个 #是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在 #后跟个空格再写文字</p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>使用空白行将一行或多行文本进行分隔。</p><p>不要用空格（spaces）或制表符（ tabs）缩进段落。</p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行。</p><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p>要加粗文本，请在单词或短语的前后各添加两个星号或下划线。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>要用斜体显示文本，在单词或短语前后添加一个星号或下划线。要斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</p><h3 id="粗体加斜体"><a href="#粗体加斜体" class="headerlink" title="粗体加斜体"></a>粗体加斜体</h3><p>要同时用粗体和斜体突出显示文本，在单词或短语的前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>要创建块引用，请在段落前添加一个 <code>&gt;</code> 符号。</p><blockquote><p>测试–引用内容</p></blockquote><p>块引用可以包含多个段落。为段落之间的空白行添加一个 <code>&gt;</code> 符号。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Dorothy followed her through many of the beautiful rooms in her castle.</span><br><span class="line">&gt;</span><br><span class="line">&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed wit</span><br></pre></td></tr></tbody></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>要将单词或短语表示为代码，请将其包裹在反引号 (<code> </code>) 中。</p><p><strong>如果要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(````)中。</strong></p><p>要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>要创建分隔线，请在单独一行上使用三个或多个星号 (<code>***</code>)、破折号 (<code>---</code>) 或下划线 (<code>___</code>) ，并且不能包含其他内容。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。</p><p>超链接Markdown语法代码：<code>[超链接显示名](超链接地址 "超链接title")</code></p><p>对应的HTML代码：<code>&lt;a href="超链接地址" title="超链接title"&gt;超链接显示名&lt;/a&gt;</code></p><p><a href="https://markdown.com.cn/basic-syntax/links.html#emphasis">强调</a> 链接, 在链接语法前后增加星号。 要将链接表示为代码，请在方括号中添加反引号。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I love supporting the **[EFF](https://eff.org)**.</span><br><span class="line">This is the *[Markdown Guide](https://www.markdownguide.org)*.</span><br><span class="line">See the section on [`code`](#code).</span><br></pre></td></tr></tbody></table></figure><p>渲染效果如下：</p><p>I love supporting the <strong><a href="https://eff.org/">EFF</a></strong>.<br>This is the <em><a href="https://www.markdownguide.org/">Markdown Guide</a></em>.<br>See the section on <a href="https://markdown.com.cn/basic-syntax/links.html#code"><code>code</code></a>.</p><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>要添加图像，使用感叹号 (<code>!</code>), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p><p>插入图片Markdown语法代码：<code>![图片alt](图片链接 "图片title")</code>。</p><p>对应的HTML代码：<code>&lt;img src="图片链接" alt="图片alt" title="图片title"&gt;</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![这是图片](/assets/img/philly-magic-garden.jpg "Magic Gardens")</span><br></pre></td></tr></tbody></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\* Without the backslash, this would be a bullet in an unordered list.</span><br></pre></td></tr></tbody></table></figure><p>渲染效果如下：</p><p>* Without the backslash, this would be a bullet in an unordered list.</p><h3 id="可做转义的字符"><a href="#可做转义的字符" class="headerlink" title="可做转义的字符"></a>可做转义的字符</h3><p>以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。</p><table><thead><tr><th>Character</th><th>Name</th></tr></thead><tbody><tr><td>\</td><td>backslash</td></tr><tr><td>`</td><td>backtick (see also <a href="https://markdown.com.cn/basic-syntax/escaping-characters.html#escaping-backticks">escaping backticks in code</a>)</td></tr><tr><td>*</td><td>asterisk</td></tr><tr><td>_</td><td>underscore</td></tr><tr><td>{ }</td><td>curly braces</td></tr><tr><td>[ ]</td><td>brackets</td></tr><tr><td>( )</td><td>parentheses</td></tr><tr><td>#</td><td>pound sign</td></tr><tr><td>+</td><td>plus sign</td></tr><tr><td>-</td><td>minus sign (hyphen)</td></tr><tr><td>.</td><td>dot</td></tr><tr><td>!</td><td>exclamation mark</td></tr><tr><td>|</td><td>pipe (see also <a href="https://markdown.com.cn/extended-syntax/escaping-pipe-characters-in-tables.html">escaping pipe in tables</a>)</td></tr></tbody></table><h3 id="特殊字符转义"><a href="#特殊字符转义" class="headerlink" title="特殊字符转义"></a>特殊字符转义</h3><h2 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h2><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是 <code>&lt;</code> 和 <code>&amp;</code>。</p><p><code>&amp;</code> 符号其实很容易让写作网页文件的人感到困扰，如果你要打「AT&amp;T」 ，你必须要写成「<code>AT&amp;T</code>」 ，还得转换网址内的 <code>&amp;</code> 符号，如果要链接到：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;q=larry+bird</span><br></pre></td></tr></tbody></table></figure><p>必须要把网址转成：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;amp;q=larry+bird</span><br></pre></td></tr></tbody></table></figure><p>如果这样写：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AT&amp;T</span><br></pre></td></tr></tbody></table></figure><p>Markdown 就会将它转为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AT&amp;amp;T</span><br></pre></td></tr></tbody></table></figure><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 支持 <a href="https://markdown.com.cn/basic-syntax/#%E5%86%85%E8%81%94-html">行内 HTML</a> ，如果你使用 <code>&lt;</code> 符号作为 HTML 标签的分隔符，那 Markdown 也不会对它做任何转换，但是如果你是写：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 &lt; 5</span><br></pre></td></tr></tbody></table></figure><p>Markdown 将会把它转换为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 &amp;lt; 5</span><br></pre></td></tr></tbody></table></figure><h2 id="内嵌HTML标签"><a href="#内嵌HTML标签" class="headerlink" title="内嵌HTML标签"></a>内嵌HTML标签</h2><p>HTML 的行级內联标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。</p><p>HTML 行级內联标签和区块标签不同，在內联标签的范围内， Markdown 的语法是可以解析的。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This **word** is bold. This &lt;em&gt;word&lt;/em&gt; is italic.</span><br></pre></td></tr></tbody></table></figure><p>渲染效果如下:</p><p>This <strong>word</strong> is bold. This <em>word</em> is italic.</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础</title>
      <link href="/2022/02/07/HTML%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/07/HTML%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h4 id="1-1-目标"><a href="#1-1-目标" class="headerlink" title="1.1 目标"></a>1.1 目标</h4><ul><li><p><input disabled="" type="checkbox"> 能够说出网页的基本组成 </p></li><li><p><input disabled="" type="checkbox"> 能够说出什么是html</p></li><li><p><input disabled="" type="checkbox"> 能够说出常用的浏览器 </p></li><li><p><input disabled="" type="checkbox"> 能够说出web标准的三大组成部分</p></li></ul><h4 id="1-2-web标准"><a href="#1-2-web标准" class="headerlink" title="1.2 web标准"></a>1.2 web标准</h4><p>优点：提高页面浏览速度、使网站易于维护、降低网站流量费用、内容能被更广泛的设备访问、更容易被搜索引擎搜索、让web的发展前景 更广阔。</p><p>简单理解：结构写到HTML文件中，表现写到css文件中、行为写到JavaScript文件中。</p><p> 结构：对网页元素整理分类。 </p><p>表现：网页元素的版式、颜色、大小等外观样式。 </p><p>行为：网页模型的定义及交互的编写。</p><h3 id="二、基础"><a href="#二、基础" class="headerlink" title="二、基础"></a>二、基础</h3><h4 id="2-1HTML语法规范"><a href="#2-1HTML语法规范" class="headerlink" title="2.1HTML语法规范"></a>2.1HTML语法规范</h4><p>  1.HTML标签是由尖括号包围起来的关键词: &lt;&gt;</p><p>   2.HTML标签通常是成对出现的，例如和.称为双标签。开始标签和结束标签。</p><ol start="3"><li><p>```</p><br><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   称为单标签，少数情况。</span><br><span class="line"></span><br><span class="line">4.  双标签关系：包含关系和并列关系。 </span><br><span class="line"></span><br><span class="line">   包含关系：</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>    <title></title><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">并列关系:</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2.2第一个HTML</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> 是HTML标签 页面中最大的标签，称为根标签。 文档的头部 注意在head标签中必须要设置的标签是title<title></title> 文档的标题 让页面有一个属于自己的网页标题文档的主题 元素包含文档的所有内容， 页面内容基本都是放在body里的。<p>声明当前页面采取的是HTML5版本来显示网页。必须写在之前。它不是HTML标签而是文档声明标签。</p> #英文网站 # 中文网站<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2.3常用HTML文本标签</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>#标题标签,字体变粗变大，独占一行，共六级可选<h1>-</h1><h6>: </h6><h1>我是一级标题</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>#段落标签，段落间有空隙： <p>这是一个段落</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>#换行标签,强制换行，行之间无空隙： <br><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>#文本格式化标签，为文字设置粗体、斜体、下划线等：#加粗 <strong></strong> 或<b></b>#倾斜 <em></em> 或<i></i>#删除线 <del></del> 或<s></s>#下划线 <ins></ins> 或<u></u>#上标字 <sup></sup>#下标字 <sub></sub><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>#无语义标签 <div>和<span>，他们就是一个盒子用来装内容的。用于布局。<div>分割、分区：用来布局，独占一行，像个大盒子<span>跨度、跨距：用来布局，网页的一行上可以多个<span>,小盒子<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2.4常见的HTML图像标签</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>#图像标签（单标签）<img src="/.com//图像URL"> 其中src指标签的必须属性，用于指定图像文件的路径和文件名#图像标签的其他属性：alt 文本属性 替换文本。当图片显示不出来（图片裂开）时用文字替换title 文本属性 提示文本。鼠标放到图像上显示的文字width 像素属性 设置图像的宽度height 像素属性 设置图像的高度border 像素属性 设置图像的边框粗细*注意点：属性不分先后顺序，图像标签可以拥有多个属性，属性与属性之间均以空格分开，属性采取键值对的格式（属性=”属性值"）<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2.5绝对路径与相对路径</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>#相对路径：以引用文件所在位置为参考基础而建立出的目录路径。#同一级路径： 如<img src="/.com//baidu.gif">#下一级路径： / 如<img src="images/baidu.gif"> 其中images是文件夹名#上一级路径： ../ 如<img src="/.com//baidu.gif"> 若下下级则../../以此类推之后的#绝对路径： 指目录下的绝对位置，通常是从盘符开始的路径。<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2.6链接标签</span><br><span class="line"></span><br><span class="line">##### 2.6.1普通常见链接标签</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><a href="跳转目标" target="目标窗口的弹出方式">文本或图像</a>#其中herf为超链接标签的必须属性，用于指定链接目标的url地址。url地址要以http://开头哦#target用于指定链接页面的打开方式，其中_self为默认值，__blank为在新窗口中的打开方式。#外部链接： 例如<a href="http://www.baidu.com">百度</a>#内部链接： 网站内部页面之间的相互链接，直接链接内部页面名称即可，例如<a href="index.html">首页</a>#空链接： 如果当时没有确定链接目标时，<a href="#">首页</a>#下载链接（压缩包.exe或.zip）： <a href="img.zip"></a>#网页元素(文本、图像、表格、音频、视频等)的链接： <a href="http://www.baidu.com"><img src="/.com//img.jpg"></a><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   #### 2.6.2（重点）锚点链接</span><br><span class="line"></span><br><span class="line">1.在链接文本的href属性中，设置属性值为#名字的形式，如</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></span></span></div></span></div></li></ol><p><a href="#two">第二集</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.找到目标位置标签，里面添加一个id属性=刚才的名字，如:</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="two">第二集介绍</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2.7HTML中的注释和特殊字符</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><!--注释内容--> 快捷键ctrl+/可以自动添加<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 3.1目标</span><br><span class="line"></span><br><span class="line">- [ ] 能够书写表格 能够写出无序列表 </span><br><span class="line">- [ ] 能够写出3~4个常用input表单类型 </span><br><span class="line">- [ ] 能够写出下拉列表表单 </span><br><span class="line">- [ ] 能够使用表单元素实现注册页面 </span><br><span class="line">- [ ] 能够独立查阅W3C文档</span><br><span class="line"></span><br><span class="line">#### 3.2.1表格标签</span><br><span class="line"></span><br><span class="line">作用：表格不是用来布局页面的，而是用来显示、展示数据的，可读性非常好</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>#定义表格的标签 <table></table># 定义表格中的行，必须嵌套在<table></table>中# 定义表格中的单元格，必须嵌套在中#字母td指表格数据（table data），即数据单元格的内容。#表示HTML表格的表头单元格，能使表头加粗居中。表示HTML表格的表头单元格。用法：将替换成<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通过表格的属性来设置边框：#在table那里添加属性 </span><br><span class="line"></span><br><span class="line">属性名                     属性值                  描述</span><br><span class="line"></span><br><span class="line"> align             left、center、right    规定表格相对周围元素的对齐方式(页面位置) </span><br><span class="line"></span><br><span class="line">border                      1或" "                规定表格单元是否有边框，默认为" "表示没有 </span><br><span class="line"></span><br><span class="line">cellpadding            像素值                规定单元边沿与其内容之间的空白，默认1像素 </span><br><span class="line"></span><br><span class="line">cellspacing              像素值               规定单元格之间的空白，默认2像素 </span><br><span class="line"></span><br><span class="line">width                像素值或百分比       规定表格的宽度 </span><br><span class="line"></span><br><span class="line">height              像素值或百分比         规定表格的高度</span><br><span class="line"></span><br><span class="line">#### 3.2.2表格结构标签</span><br><span class="line"></span><br><span class="line">使用场景：表格可能很长，为更好的表示表格的语义，可将表格分割成表格头部和表格主体两大部分。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>标签表示表格的头部区域，内部一定要有标签，标签表示表格的主体区域，主要用于放数据主体。这俩标签都在<table></table>里面。<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 3.2.3合并单元格</span><br><span class="line"></span><br><span class="line">- 跨行合并： rowspan="合并单元格的个数" 最上侧单元格为目标单元格，写合并代码 </span><br><span class="line">- 跨列合并： colspan="合并单元格的个数" 最左侧单元格为目标单元格，写合并代码</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 合并完删除多余的单元格。</span><br><span class="line"></span><br><span class="line">#### 3.3列表标签</span><br><span class="line"></span><br><span class="line">表格是用来展示数据的，列表是用来布局的.</span><br><span class="line"></span><br><span class="line">- 无序列表：</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>  <ul>      <li>列表项1</li>      <li>列表项2</li>      <li>列表项3</li>      ...  <ul>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  #无序列表的各个列表项之间没有顺序等级之分，是并列的。</span><br><span class="line"></span><br><span class="line">​       #&lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;,直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或文字的做法是不被允许的。</span><br><span class="line"></span><br><span class="line">- 有序列表：</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>  <ol>      <li>列表项1</li>      <li>列表项2</li>      <li>列表项3</li>      ...  <ol>  <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  1.&lt;ol&gt;&lt;/ol&gt;**中只能嵌套&lt;li&gt;&lt;/li&gt;,直接在&lt;ol&gt;&lt;/ol&gt;标签中输入其他标签或文字的做法是不被允许的。**</span><br><span class="line"></span><br><span class="line">  2.&lt;li&gt;&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。</span><br><span class="line"></span><br><span class="line">  3.有序列表会带有自己的样式属性，实际使用会用CSS来设置。</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- 自定义列表：常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><dl></dl>用来定义列表，该标签会与<dt></dt>(定义项目/名字)和<dd></dd>一起使用.<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><dl></dl>里只能包含dt和dd。dt和dd的个数没有限制，经常是一个dt对应多个dd。<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">\#ul是unordered lists的缩写 (无序列表)。</span><br><span class="line"></span><br><span class="line">ol是ordered lists的缩写（有序列表）</span><br><span class="line"></span><br><span class="line"> dl是definition lists的英文缩写 (自定义列表) </span><br><span class="line"></span><br><span class="line">dt是definition term的缩写 (自定义列表组) </span><br><span class="line"></span><br><span class="line">dd是definition description的缩写（自定义列表描述）</span><br><span class="line"></span><br><span class="line">### 3.4表单标签</span><br><span class="line"></span><br><span class="line">收集信息。</span><br><span class="line"></span><br><span class="line"> HTML中一个完整的表单由表单域、表单控件（表单元素）和提示信息3个部分构成。</span><br><span class="line"></span><br><span class="line">#### 3.4.1表单域</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;!-- &lt;form&gt;标签用于定义表单域，以实现用户信息的收集和传递。&lt;form&gt;会把它范围内的表单元素信息提交给服务器。 --&gt;</span><br><span class="line">  &lt;form action="url地址" method="提交方式" name="表单域名称"&gt;</span><br><span class="line">  各种表单元素控件</span><br><span class="line">  &lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure><p>action属性的属性值是url地址，用于指定接收并处理表单数据的服务器程序的url地址。</p><p>method属性的属性值是get/post，用于设置表单数据的提交方式，其取值为get或post。 </p><p>name属性的的属性值是名称，用于指定表单的名称，以区分同一个页面中的多个表单域。</p><h4 id="3-4-2表单控件"><a href="#3-4-2表单控件" class="headerlink" title="3.4.2表单控件"></a>3.4.2表单控件</h4><ul><li>```<br><input type="属性值"> 它是单标签<br>例：<form name="name1"><!-- text 文本框 用户可以在里面输入任何文字 -->用户名：<input type="text"> <br><!-- password 密码框 用户看不见输入的密码 -->密码： <input type="password"> <br><!-- radio 单选按钮 可以实现多选一 -->性别：男<input type="radio">女<input type="radio">人妖<input type="radio"> <br><!-- checkbox 复选框 可以实现多选 -->爱好：吃饭<input type="checkbox">睡觉<input type="checkbox">打豆豆<input type="checkbox"></form>另外加个checked="checked"可以默认选择<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[]: https://www.runoob.com/tags/tag-input.html:</span><br><span class="line"></span><br><span class="line">2. select下拉表单元素</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> <select>     <option>选项1</option>     <option>选项2</option>     <option>选项3</option>     ... </select>   #<select>中至少包含一对<option> #在</option><option>中定义selected= “selected”时，当前项即为默认选中项。 123456789    3. textarea文本域元素使用场景：当用户输入内容较多时，我们就不能使用文本框表单了。此时我们用&lt;textarea&gt;标签。在表单元素中，&lt;textarea&gt;标签是用于定义多行文本输入的控件。</option></select></li></ul><textarea rows="3" cols="20">    文本内容</textarea><p>#通过<textarea>标签可以轻松地创建多行文本输入框。&lt;br&gt;#cols=”每行中的字符串”， rows=”显示的行数”</textarea></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 4、HTML5提高--新增语义化标签</span><br><span class="line"></span><br><span class="line">###### 4.1、布局</span><br><span class="line"></span><br><span class="line">HTML5新增特性主要是针对以前的不足，增加了一些新的标签、新的表单和新的表单属性等。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><header> 头部标签<nav> 导航标签<article> 内容标签<section> 定义文档某个区域<aside> 侧边栏标签<footer> 尾部标签<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20210817195438857](C:\Users\fanliting\AppData\Roaming\Typora\typora-user-images\image-20210817195438857.png)</span><br><span class="line"></span><br><span class="line">比如说要做个这样的。。。。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>HTML5新增语义标签</title>    <style>        header, nav        {            height: 120px;            background-color: pink;            border-radius: 15px;            width: 800px;            margin: 15px auto;<pre><code>    &#125;    section&#123;        width: 500px;        height: 300px;        background-color: skyblue;    &#125;&lt;/style&gt;</code></pre></head><body>   <header>头部标签</header>   <nav>导航栏标签</nav>   <section>某个区域</section></body></html><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**注意：**</span><br><span class="line"></span><br><span class="line">- 这种语义化标准主要是针对搜索引擎的</span><br><span class="line">- 这些新标签页面中可以使用多次</span><br><span class="line">- 移动端更喜欢用这些标签</span><br><span class="line">- HTML5还增加了很多其他标签，后面慢慢学。。。</span><br><span class="line"></span><br><span class="line">###### 4.2、HTML5新增的多媒体标签</span><br><span class="line"></span><br></pre></td></tr></table></figure>1、音频：<audio>2、视频：<video><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用它们可以很方便的在页面中嵌入音频和视频，而不再去使用flash和其他浏览器插件。</span><br><span class="line"></span><br><span class="line">HTML5在不使用插件的情况下，也可以原生的支持视频格式文件的播放，当然，支持的格式是有限的。</span><br><span class="line"></span><br><span class="line">![image-20210817202542296](https://github.com/LeatingVan/Image/blob/main/cover/202202071437210.png?raw=tru)</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br></pre></td></tr></table></figure><video src="文件地址" controls="controls"></video>```<p><strong>&#x2F;&#x2F;……..音频下次再学。溜了溜了</strong></p><h6 id="4-3、HTML5新增的input类型"><a href="#4-3、HTML5新增的input类型" class="headerlink" title="4.3、HTML5新增的input类型"></a>4.3、HTML5新增的input类型</h6></style></footer></aside></section></article></nav></header></ol></ol></ul></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>404</title>
      <link href="/2022/02/07/404/"/>
      <url>/2022/02/07/404/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
